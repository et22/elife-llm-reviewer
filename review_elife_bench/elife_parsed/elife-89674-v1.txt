TITLE
A neuronal least-action principle for real-time learning in cortical circuits

ABSTRACT
One of the most fundamental laws of physics is the principle of least action. Motivated by its predictive power, we introduce a neuronal least-action principle for cortical processing of sensory streams to produce appropriate behavioral outputs in real time. The principle postulates that the voltage dynamics of cortical pyramidal neurons prospectively minimizes the local somato-dendritic mismatch error within individual neurons. For output neurons, the principle implies minimizing an instantaneous behavioral error. For deep network neurons, it implies the prospective firing to overcome integration delays and correct for possible output errors right in time. The neuron-specific errors are extracted in the apical dendrites of pyramidal neurons through a cortical microcircuit that tries to explain away the feedback from the periphery, and correct the trajectory on the fly. Any motor output is in a moving equilibrium with the sensory input and the motor feedback during the ongoing sensory-motor transform. Online synaptic plasticity reduces the somatodendritic mismatch error within each cortical neuron and performs gradient descent on the output cost at any moment in time. The neuronal least-action principle offers an axiomatic framework to derive local neuronal and synaptic laws for global real-time computation and learning in the brain.

INTRODUCTION
Wigner‚Äôs remark about the ‚Äòunreasonable effectiveness‚Äô of mathematics in allowing us to understand physical phenomena Wigner, 1960 is famously contrasted by Gelfand‚Äôs quip about its ‚Äòunreasonable ineffectiveness‚Äô in doing the same for biology (Borovik, 2021). Considering the component of randomness that is inherent to evolution, this may not be all that surprising. However, while this argument holds just as well for the brain at the cellular level, ultimately brains are computing devices. At the level of computation, machine learning, and neuroscience have revealed near-optimal strategies for information processing and storage, and evolution is likely to have found similar principles through trial and error (Hassabis et al., 2017). Thus, we have reason to hope for the existence of fundamental principles of cortical computation that are similar to those we have found in the physical sciences. Eventually, it is important for such approaches to relate these principles back to brain phenomenology and connect function to structure and dynamics.
In physics, a fundamental measure of ‚Äòeffort‚Äô is the action of a system, which nature seeks to ‚Äòminimize.‚Äô Given an appropriate description of interactions between the system‚Äôs constituents, the least-action principle can be used to derive the equations of motion of any physical system (Feynman et al., 2011; Coopersmith, 2017). Here, we suggest that in biological information processing, a similar principle holds for prediction errors, which are of obvious relevance for cognition and behavior.
Based on such errors, we formulate a neuronal least-action (NLA) principle which can be used to derive neuronal dynamics and map them to observed dendritic morphologies and cortical microcircuits. Within this framework, local synaptic plasticity at basal and apical dendrites can be derived by stochastic gradient descent on errors. The errors that are minimized refer to the errors in output neurons that are typically thought to represent motor trajectories, planned and encoded in cortical motor areas and ultimately in the spinal cord and muscles. In the context of motor control, a phenomenological ‚Äòminimal action principle‚Äô has previously been proposed that guides the planning and execution of movements (Feldman and Levin, 2009). Our neuronal least-action principle reformulates and formalizes the classical equilibrium point hypothesis (Latash, 2010) in a dynamical setting, linking it to optimality principles in sensory-motor control (Todorov, 2004).
Other attempts exist to link biological information processing and neural networks with the least-action principle, for instance by directly learning to reproduce a given trajectory (Amirikian and Lukashin, 1992), by minimizing the physical action for the muscle force generation by motor unit recruitment (Senn et al., 1995), minimizing cognitive prediction errors (Alonso et al., 2012), minimizing output errors with a weight-change regularization (Betti and Gori, 2016), minimizing psychomotor work (Fox and Kotelba, 2018), minimizing data transport through a network (Karkar et al., 2021), minimizing the discrimination information (Summers, 2021), or minimizing the free energy (Friston, 2010; Friston et al., 2022). Apart from the latter, however, these attempts remain far from the biology that seems to resist a formalization with the tool of physics ‚Äì at least, when applied too strictly.
The fundamental novelty of our NLA principle is the way it deals with time. In physics, bodies interact based on where they are now, irrespective of what happens in the future. Living systems, instead, interact based on what could happen in the near future, and react early to stay alive. This difference is also mirrored in the way our NLA principle looks for an error-minimizing trajectory of brain states. We postulate that the brain trades with near-future states and seeks for a path that minimizes errors of these future states at any moment in time. Looking ahead towards what will likely happen allows the network for correcting the internal trajectory of deep neurons early enough so that the delayed output moves along the desired path. The notion of looking into the future to gate a dynamical system is also central in optimal control theory (as expressed by the Bellman equation, see e.g. Todorov, 2006). Yet, starting with a neuronal action is more principled as it includes the derivation of the dynamical system itself that will be optimally controlled.
The insight into the time structure of biological information processing allows us to express a simple form of a total ‚Äòmismatch energy‚Äô for our cortical neuronal networks, from which we derive the dynamic neuronal and synaptic laws.In short, the mismatch energy within a single pyramidal neuron is the squared prediction error between basal dendrites and the soma, together with the apical dendrites receiving a top-down feedback. The apical dendrites calculate a local prospective prediction error that looks ahead in time and overcomes neuronal integration delays (Figure 1a). As a consequence, the output neurons are corrected on the fly by the prospective error processing, pushing them in real time closer to the desired path. In addition, the prospective errors are suited for gradient learning of the sensory synapses on the basal dendrites. This gradient learning is proven to reduce the error in the output neurons at any moment in time.
Figure 1: Somato-dendritic mismatch energies and the neuronal least-action (NLA) principle. (a1) Sketch of a cross-cortical network of pyramidal neurons described by NLA. (a2) Correspondence between elements of NLA and biological observables such as membrane voltages and synaptic weights. (b1) The NLA principle postulates that small variations Œ¥ùíñ~ (dashed) of the trajectories ùíñ~ (solid) leave the action invariant, Œ¥A=0. It is formulated in the look-ahead coordinates ùíñ~ (symbolized by the spyglass) in which `hills' of the Lagrangian (shaded gray zones) are foreseen by the prospective voltage so that the trajectory can turn by early enough to surround them. (b2) In the absence of output nudging (Œ≤=0), the trajectory ùíñ(t) is solely driven by the sensory input, and prediction errors and energies vanish (L=0, outer blue trajectory at bottom). When nudging the output neurons towards a target voltage (Œ≤&gt;0), somatodendritic prediction errors appear, the energy increases (red dashed arrows symbolising the growing ‚Äòvolcano‚Äô) and the trajectory ùíñ(t) moves out of the L=0 hyperplanes, riding on top of the `volcano' (red trajectory). Synaptic plasticity WÀô reduces the somatodendritic mismatch along the trajectory by optimally ‚Äòshoveling down the volcano‚Äô (blue dashed arrows) while the trajectory settles in a new place on the L=0 hyperplane (inner blue trajectory at bottom).
The NLA principle builds on and integrates various ingredients from existing work and theories. Output neurons, be they motor neurons or decision-making neurons, are postulated to be ‚Äònudged‚Äô towards the desired target time course by additional synaptic input to the soma or the proximal apical dendrite, as described by Urbanczik and Senn, 2014. The cortical microcircuit with lateral ‚Äòinhibition‚Äô that seeks to cancel the top-down feedback in order to extract the apical error is inspired by Sacramento et al., 2018 and Haider et al., 2021. The energy-based approach for describing error-backpropagation for weak nudging is borrowed from the Equilibrium Propagation algorithm (Scellier and Bengio, 2017) that we generalize from a steady-state algorithm to real-time computation in cross-cortical microcircuits. Our theory covers both cases of weak and strong output nudging. For strong nudging, it likewise generalizes the least-control principle (Meulemans et al., 2022) and the prospective configuration algorithm (Song et al., 2024) from a steady-state to a dynamic real-time version, linking to optimal feedback control (Todorov and Jordan, 2002). Finally, the apical activity of our pyramidal neurons can be seen in the tradition of predictive coding (Rao and Ballard, 1999), where cortical feedback connections try to explain away lower-level activities. Yet, different from classical predictive coding, our prediction errors are integrated with the soma, and these errors are prospective in time. The errors extrapolate from current to future activities, so that their integration improves the network output in real time. The combination of an energy-based model with prospective coding in which neuronal integration delays are compensated on the fly enters also in Haider et al., 2021.
The paper is organized as follows: we first define the prospective somatodendritic mismatch error, construct out of this the mismatch energy of a network, and ‚Äòminimize‚Äô this energy to obtain the error-corrected, prospective voltage dynamics of the network neurons. We then show that the prospective error coding leads to an instantaneous and joint processing of low-pass filtered input signals and backpropagated errors. Applied to motor control, the instantaneous processing is interpreted as a moving equilibrium hypothesis according to which sensory inputs, network state, motor commands, and muscle feedback are in a self-consistent equilibrium at any point of the movement. We then derive a local learning rule that globally minimizes the somato-dendritic mismatch errors across the network, and show how this learning can be implemented through error-extracting cortical microcircuits and dendritic predictive plasticity.

RESULTS
Somato-dendritic mismatch errors and the Lagrangian of cortical circuits
We consider a network of neurons ‚Äì identified as pyramidal cells ‚Äì with firing rates ri(t) in continuous time t. The somatic voltage ui of pyramidal neuron i is driven by the close-by basal input current, ‚àëjWijrj, with presynaptic rates rj and synaptic weights Wij, and an additional distal apical input ei that will be learned to represent a prospective prediction error at any moment in time (Figure 1a). While in classical rate-based neuron models the firing rate ri of a neuron is a function of the somatic voltage, œÅ(ui), the NLA principle implies that the effective firing rate of a cortical neuron is prospective. More concretely, the formalism derives a firing rate that linearly extrapolates from œÅ(ui) into the future with the temporal derivative, ri=œÅ(ui)+œÑœÅÀô(ui), where œÅÀô(ui) represents the temporal derivative of œÅ(ui(t)). There is experimental evidence for such prospective coding in cortical pyramidal neurons where the instantaneous rate ri is in fact not only a function of the underlying voltage, but also a function of how quickly that voltage increases (see Figure 2a).
Figure 2: Prospective coding in cortical pyramidal neurons enables instantaneous voltage-to-voltage transfer. (a1) The instantaneous spike rate of cortical pyramidal neurons (top) in response to sinusoidally modulated noisy input current (bottom) is phase-advanced with respect to the input adapted from K√∂ndgen et al., 2008. (a2) Similiarly, in neuronal least-action (NLA), the instantaneous firing rate of a model neuron (r=œÅ(u)+œÑœÅÀô(u), black) is phase-advanced with respect to the underlying voltage (u, red, postulating that the low-pass filtered rate is a function of the voltage, r‚Äæ=œÅ(u)). (b) Dendritic input in the apical tree (here called e‚Äæ) is instantaneously causing a somatic voltage modulation (u, modeling data from Ulrich, 2002). The low-pass filtering with œÑ along the dendritic shaft is compensated by a lookahead mechanism in the dendrite (e=e‚Äæ+œÑe‚ÄæÀô). In (Ulrich, 2002) a phase advance is observed even with respect to the dendritic input current, not only the dendritic voltage, although only for slow modulations (as here). (c) While the voltage of the first neuron (u1) integrates the input rates rin from the past (bottom black upward arrows), the output rate r1 of that first neuron looks ahead in time, r1=œÅ(u1)+œÑœÅÀô(u1) (red dashed arrows pointing into the future). The voltage of the second neuron (u2) integrates the prospective rates r1 (top black upwards arrows). By doing so, it inverts the lookahead operation, resulting in an instantaneous transfer from u1(t) to u2(t) (blue arrow and circles).
The second central notion of the theory is the prospective error ei, that we interpret as prospective somato-dendritic mismatch error in the individual network neurons, ei=(ui+œÑuÀôi)‚àí‚àëjWijrj . It is defined as a mismatch between the prospective voltage, ui+œÑuÀôi, and the weighted prospective input rates, ‚àëjWijrj. In the same way, as the firing rates rj linearly extrapolate into the future given the current-voltages uj of the presynaptic neurons j, the postsynaptic error is based on the linear extrapolation of its current voltage ui using its temporal derivative, ui+œÑuÀôi . If the prospective error ei is low-pass filtered with time constant œÑ, it takes the form e‚Äæi=ui‚àí‚àëjWijr‚Äæj, where r‚Äæj is the corresponding low-pass filtered firing rate of the presynaptic neuron j (that becomes a function of the presynaptic voltage, r‚Äæj=œÅ(uj) , see Methods, Sect. Euler-Lagrange equations as inverse low-pass filters). We refer to e‚Äæi as a somato-dendritic mismatch error of neuron that, as compared to ei, is non-prospective and instantaneous.
We next interpret the mismatch error e‚Äæi in terms of the morphology and biophysics of pyramidal neurons with basal and apical dendrites. While the error ei is formed in the apical dendrite, this error is low-pass filtered and added to the somatic voltage ui, that is also driven by the low-pass filtered basal input ‚àëjWijr‚Äæj, so that  ui=‚àëjWijr‚Äæj+e‚Äæi. From the perspective of the basal dendrites, the low-pass filtered apical error e‚Äæi can be calculated as the difference between the somatic voltage and the own local low-pass filtered input, e‚Äæi=ui‚àí‚àëjWijr‚Äæj. The somatic voltage ui is assumed to be sampled in the basal dendrite by the backpropagating acting potentials (Urbanczik and Senn, 2014; Spicher et al., 2017). The apical error now appears as a ‚Äòsomato-basal‚Äô mismatch error, that both are summarized as a somato-dendritic mismatch error. It tells the difference between ‚Äòwhat a neuron does,‚Äô which is based on the somatic voltage ui, and ‚Äòwhat the basal inputs think it should do,‚Äô which is based on its own input ‚àëWijr‚Äæj (Figure 1a2). The two quantities may deviate because neuron i get additional ‚Äòunpredicted‚Äô apical inputs from higher-area neurons that integrate with the somatic voltage ui. What cannot be predicted in ui by the sensory-driven basal input remains as somato-basal (somato-dendritic) mismatch error e‚Äæi.
Associated with this mismatch error is the somatodendritic mismatch energy defined for each network neuron i‚ààN as the squared mismatch error,
On a subset of output neurons of the whole network, O‚äÜN, a cost is defined as a function of the somatic voltage and some instructive reference signal such as targets or a reward. When a target trajectory uo*(t) is available, the cost is defined at each time point as a squared target error,
Much more general mismatch energies and cost functions are conceivable, for instance, errors of the form e‚Äæi=ui‚àífi(ùíñ,t) for general functions fi of the voltage vector ùíñ and of time, encompassing conductance-based neurons, but also further dynamic variables can be included such as threshold adaptation (see Appendix 6). The cost represents a performance measure for the entire network that produces the output voltages uo(t) in response to some input rates ùíìin(t). The cost directly relates to behavioral or cognitive measures such as the ability of an animal or human to perform a particular task in real time. The target could be provided by explicit external supervision, for example, target movements in time encoded by uo*(t), it could represent an expected reward signal, or it could arise via self-supervision from other internal prediction errors.
We define the Lagrangian (or ‚Äòtotal energy‚Äô) of the network as a sum across all mismatch energies and costs, weighted by the nudging strength Œ≤ of the output neurons,
The low-pass filtered presynaptic rates, r‚Äæj, also encompass the external input neurons. While in classical energy-based approaches, L is called the total energy, we call it the ‚ÄòLagrangian‚Äô because it will be integrated along real and virtual voltage trajectories as done in variational calculus (leading to the Euler-Lagrange equations, see below and Appendix 6). We ‚Äòprospectively‚Äô minimize L locally across a voltage trajectory, so that, as a consequence, the local synaptic plasticity for Wij will globally reduce the cost along the trajectory (Theorem 1 below).
Due to the prospective coding, the Lagrangian can be minimal at any moment in time while the network dynamics evolve. This is different from the classical predictive coding (Rao and Ballard, 1999) and energy-based approaches (Scellier and Bengio, 2017; Song et al., 2024), where a stimulus needs to be fixed in time while the network relaxes to a steady state, and only there the prediction error is minimized (see Appendix 3).

The least-action principle expressed for prospective firing rates
Motivated by the prospective firing in pyramidal neurons, we postulate that cortical networks strive to look into the future to prevent instantaneous errors. Each neuron tries to move along a trajectory that minimizes its own mismatch error e‚Äæi across time (Figure 1b). The ‚Äòneuronal currency‚Äô with which each neuron ‚Äòtrades‚Äô with others to choose its own error-minimizing trajectory is the future discounted membrane potential,
The prospective voltages u~ are the ‚Äòcanonical coordinates‚Äô entering the NLA principle, and in these prospective coordinates the overall network searches for a ‚Äòleast-action trajectory‚Äô. Since from u~ we can recover the instantaneous voltage via u=u~‚àíœÑu~Àô (see Appendix 2), we can replace u in the Lagrangian and obtain L as a function of our new prospective coordinates u~ and the ‚Äòvelocities‚Äô u~Àô, i.e.,L=L[ùíñ~,ùíñ~Àô], where bold fonts represent vectors. Inspired by the least-action principle from physics, we define the neuronal action A as a time-integral of the Lagrangian,
The NLA principle postulates that the trajectory ùíñ~(t) keeps the action A stationary with respect to small variations Œ¥ùíñ~ (Figure 1b1). In other words, nature chooses a trajectory such that, when deviating a little bit from it, say by Œ¥ùíñ~, the value of A will not change (or at most up to second order in the variation), formally Œ¥A=0. The motivation to search for a trajectory that keeps the action stationary is borrowed from physics. The motivation to search for a stationary trajectory by varying the near-future voltages ùíñ~, instead of ùíñ, is assigned to the evolutionary pressure in biology to ‚Äòthink ahead of time.‚Äô To not react too late, internal delays involved in the integration of external feedback need to be considered and eventually need to be overcome. In fact, only for the ‚Äòprospective coordinates‚Äô defined by looking ahead into the future, even when only virtually, will a real-time learning from feedback errors become possible (as expressed by our Theorems below).
The equations of motion that keep the action stationary with respect to these prospective coordinates are known to satisfy the Euler-Lagrange equations.
Applying these equations to our Lagrangian yields a prospective version of the classical leaky integrator voltage dynamics, with rates ùíì and errors ùíÜ that are looking into the future (Methods, Sects. Euler-Lagrange equations as inverse low-pass filters, Deriving the network dynamics from the Euler-Lagrange equations),
The ‚Äò‚ãÖ‚Äô denotes the component-wise product, and the weight matrix splits into weights from input neurons and weights from network neurons, ùëæ=(ùëæin,ùëænet). While for output neurons a target error can be defined, e‚Äæo*=uo*‚àíuo, for non-output neurons i no target exists and we hence set e‚Äæi*=0. In a control theoretic framework, the neuronal dynamics (Equation 7a) represent the state trajectory, and the adjoint error dynamics Equation 7b represent the integrated costate trajectory (Todorov, 2006).
From the point of view of theoretical physics, where the laws of motion derived from the least-action principle contain an acceleration term (as in Newton‚Äôs law of motion, like mx¬®=‚àíx+F for a harmonic oscillator), one may wonder why no second-order time derivative appears in the NLA dynamics. As an intuitive example, consider driving into a bend. Looking ahead in time helps us to reduce the lateral acceleration by braking early enough, as opposed to braking only when the lateral acceleration is already present. This intuition is captured by minimizing the neuronal action A with respect to the discounted future voltages u~i instead of the instantaneous voltages ui. Keeping up an internal equilibrium in the presence of a changing environment requires looking ahead and compensating early for the predicted perturbations. Technically, the acceleration disappears because the Euler-Lagrange operator (Equation 6) turns into a lookahead-gradient operator, ‚àÇ‚àÇu~i‚àíddt‚àÇ‚àÇu~Àôi=(1+ddt)‚àÇ‚àÇui, since the u~¬®i is absorbed via u~Àôi‚àíœÑu~¬®i=uÀôi (see Methods, Sect. Euler-Lagrange equations as inverse low-pass filters, and Appendix 6 for the link to the least-action principle in physics).
Mathematically, the voltage dynamics in Equation 7a specifies an implicit differential equation since ùíñÀô(t) also appears on the right-hand side. This is because the prospective rates ùíì=œÅ(ùíñ)+œÑœÅÀô(ùíñ) include ùíñÀô through œÅÀô(u)=œÅ‚Ä≤(u)‚ãÖuÀô. Likewise, the prospective errors ùíÜ=ùíÜ‚Äæ+œÑùíÜ‚ÄæÀô, with ùíÜ‚Äæ given in Equation 7b and plugged into Equation 7a, imply ùíñÀô through e¬ØÀô(u)=e¬Ø‚Ä≤(u)‚ãÖuÀô. Nevertheless, the voltage dynamics can be stably run by replacing ùíñÀô(t) on the right-hand side of Equation 7a with the temporal derivative ùíñÀô(t‚àídt) from the previous time step (technically, the Hessian (1‚àíùëæùùÜ‚Ä≤‚àíùíÜ‚Äæ‚Ä≤) is required to be strictly positive definite, see Methods Sect. From implicit to explicit differential equations and Appendix 3). This ensures that the voltage dynamics of Equation 7a, Equation 7b can be implemented in cortical neurons with a prospective firing and a prospective dendritic error (see Figure 2).
The error expression in Equation 7b is reminiscent of error backpropagation Rumelhart et al., 1986 and can in fact be related (Methods, Sect. Deriving the error backpropagation formula). Formally, the errors are backpropagated via transposed network matrix, ùëænetT, modulated by r‚Äæi‚Ä≤, the derivative of r‚Äæi=œÅ(ui) with respect to the underlying voltage. While the transpose can be constructed with various local methods see Akrout et al., 2019; Max et al., 2022 in our simulations we mainly adhere to the phenomenon of feedback alignment (Lillicrap et al., 2016) and consider fixed and randomized feedback weights ùë© (unless stated differently). Recent control theoretical work is exploiting the same prospective coding technique as expressed in Equation 7a, Equation 7b to tackle general time-varying optimization problems see Simonetto et al., 2020 for a review and Appendix 3 for the detailed connection.

Prospective coding in neurons and instantaneous propagation
The prospective rates and errors entering via ùíì and ùíÜ in the NLA (Equation 7a) are consistent with the prospective coding observed in cortical pyramidal neurons in vitro (K√∂ndgen et al., 2008). Upon sinusoidal current injection into the soma, the somatic firing rate is advanced with respect to its voltage (Figure 2a), effectively compensating for the delay caused by the current integration. Likewise, sinusoidal current injection in the apical tree causes a lag-less voltage response in the soma (Figure 2b, Ulrich, 2002). While the rates and errors in general can be reconstructed from their low-pass filterings via ùíì=ùíì‚Äæ+œÑùíì‚ÄæÀô and ùíÜ=ùíÜ‚Äæ+œÑùíÜ‚ÄæÀô, they become prospective in time because ùíì‚Äæ and ùíÜ‚Äæ are themselves instantaneous functions of the voltage ùíñ, and hence ùíì and ùíÜ depend on ùíñÀô. The derivative of the membrane potential implicitly also appears in the firing mechanism of Hodgkin-Huxley-type conductances, with a quick depolarization leading to a stronger sodium influx due to the dynamics of the gating variables (Hodgkin and Huxley, 1952). This advances the action potential as compared to a firing that would only depend on ùíñ, not ùíñÀô, giving an intuition of how such a prospective coding may arise. A similar prospective coding has been observed for retinal ganglion cells (Palmer et al., 2015) and cerebellar Purkinje cells (Ostojic et al., 2015), making a link from the visual input to the motor control.
To understand the instantaneous propagation through the network, we low-pass filter the dynamic equation ùíñ+œÑùíñÀô=ùëæùíì+ùíÜ (obtained by rearranging Equation 7a), with ùíÜ‚Äæ given by Equation 7b, to obtain the somatic voltage ùíñ=ùëæùíì‚Äæ(ùíñ)+ùíÜ‚Äæ(ùíñ). At any point in time, the voltage is in a moving equilibrium between forward and backpropagating inputs. Independently of the network architecture, whether recurrent or not, the output is an instantaneous function of the low-pass filtered input and a putative correction towards the target, ùíñùíê(t)=ùë≠W(ùíì‚Äæin(t),ùíÜ‚Äæùíê*(t)), see Figure 2C and Methods, Sect. Proving theorem 1 (rt-DeEP). The mapping again expresses an instantaneous propagation of voltages throughout the network in response to both, the low-pass filtered input ùíì‚Äæin and feedback error ùíÜ‚Äæùíê*. This instantaneity is independent of the network size, and in a feed-forward network is independent of its depths (see also Haider et al., 2021, where the instantaneity is on the rates, not the voltages). In the absence of the look-ahead activity, each additional layer would slow down the network relaxation time.
Notice that an algorithmic implementation of the time-continuous dynamics of a N-layer feedforward network would still need N calculation steps until information from layer 1 reaches layer N. However, this does not imply that an analog implementation of the prospective dynamics will encounter delays. To see why, consider a finite step-change Œîùíñ1 in the voltage of layer 1. In the absence of the look-ahead, Œîùíñ1 was mapped within the infinitesimal time interval dt to an infinitesimal change dùíñ2 in the voltages of layer 2. But with a prospective firing rate, r1=œÅ(u1)+œÑœÅ‚Ä≤(u1)‚ãÖuÀô1, a step-change Œîùíñ1 translates to a delta-function in ùíì1, this in turn to a step-change in the low-pass filtered rates Œîùíì‚Äæ1, and therefore within dt to a step-change Œîùíñ2 in the voltages ùíñ2 of the postsynaptic neurons (Figure 2c). Iterating this argument, a step-change Œîùíñ1 propagates ‚Äòinstantaneously‚Äô through N layers within the ‚Äòinfinitesimal‚Äô time interval Ndt to a step-change ŒîùíñN in the last layer. When run in a biophysical device in continuous time that exactly implements the dynamical Equation 7a, the implementation becomes an instantaneous computation (since dt‚Üí0). Yet, in a biophysical device, information has to be moved across space. This typically introduces further propagation delays that may not be captured in our formalism where low-pass filtering and prospective coding cancel each other exactly. Nevertheless, analog computation in continuous time, as formalized here, offers an idea to ‚Äòinstantaneously‚Äô realize an otherwise time-consuming numerical recipe run on time-discrete computing systems that operate with a finite clock cycle.

Prospective control and the moving equilibrium hypothesis
Crucially, at the level of the voltage dynamics (Equation 7a) the correction is based on the prospective error ùíÜ. This links our framework to optimal control theory and motor control where delays are also taken into account, so that a movement can be corrected early enough (Wolpert and Ghahramani, 2000; Todorov and Jordan, 2002; Todorov, 2004). The link between energy-based models and optimal control was recently drawn for strong nudging (Œ≤‚Üí‚àû) to learn individual equilibrium states (Meulemans et al., 2022). Our prospective error ùíÜ(t) appears as a ‚Äòcontroller‚Äô that, when looking at the output neurons, pushes the voltage trajectories toward the target trajectories. Depending on the nudging strength Œ≤, the control is tighter or weaker. For infinitely large Œ≤, the voltages of the output neurons are clamped to the time-dependent target voltages, uo=uo* (implying eo*=0), while their errors, e‚Äæo=uo‚àí(ùëæùíì‚Äæ)o, instantaneously correct all network neurons. For small Œ≤, the output voltages are only weakly controlled, and they are dominated by the forward input, uo‚âà(Wùíì‚Äæ)o.
To show how the NLA principle with the prospective coding globally maps to cortico-spinal circuits we consider the example of motor control. In the context of motor control, our network mapping ùíñùíê=ùë≠W(ùíì‚Äæin,ùíÜ‚Äæùíê*) can be seen as a forward internal model that quickly calculates an estimate of the future muscle length ùíñùíê based on some motor plans, sensory inputs, and the current proprioceptive feedback (Figure 3a). Forward models help to overcome delays in the execution of the motor plan by predicting the outcome, so that the intended motor plans and commands can be corrected on the fly (Kawato, 1999; Wolpert and Ghahramani, 2000).
Figure 3: Moving equilibrium hypothesis for motor control and real-time learning of cortical activity. (a) A voluntary movement trajectory can be specified by the target length of the muscles in time, ùíñùíê*, encoded through the Œ≥-innervation of muscle spindles, and the deviation of the effective muscle lengths from the target, ùíñùíê‚àíùíñùíê*=‚àíùíÜ‚Äæùíê*. The Ia-afferents emerging from the spindles prospectively encode the error, so that their low-pass filtering is roughly proportional to the length deviation, truncated at zero (red). The moving equilibrium hypothesis states that the low-pass filtered input ùíì‚Äæin, composed of the movement plan ùíì‚Äæinplan and the sensory input (here encoding the state of the plant e.g., through visual and proprioceptive input, ùíì‚Äæinvis and ùíì‚Äæinprop), together with the low-pass filtered error feedback from the spindles, ùíÜ‚Äæùíê*, instantaneously generate the muscle lengths, ùíñùíê=ùë≠W(ùíì‚Äæin,ùíÜ‚Äæùíê*), and are thus at any point in time in an instantaneous equilibrium (defined by Equation 7a, Equation 7b). (b1) Intracortical intracortical electroencephalogram (iEEG) activity recorded from 56 deep electrodes and projected to the brain surface. Red nodes symbolize the 56 iEEG recording sites modeled alternately as input or output neurons, and blue nodes symbolize the 40 ‚Äòhidden‚Äô neurons for which no data is available, but used to reproduce the iEEG activity. (b2) Corresponding NLA network. During training, the voltages of the output neurons were nudged by the iEEG targets (black input arrows, but for all red output neurons). During testing, nudging was removed for 14 out of these 56 neurons (here, represented by neurons 1, 2, 3). (c1) Voltage traces for the 3 example neurons in a2, before (blue) and after (red) training, overlaid with their iEEG target traces (gray). (c2) Total cost, integrated over a window of 8 s of the 56 output nodes during training with sequences of the same duration. The cost for the test sequences was evaluated on a 8 s window not used during training.
The observation that muscle spindles prospectively encode the muscle length and velocity (Dimitriou and Edin, 2010) suggests that the prospective coding in the internal forward model mirrors the prospective coding in the effective forward pathway. This forward pathway leads from the motor plan to the spindle feedback, integrating also cerebellar and brainstem feedback (Kawato, 1999). Based on the motor plans, the intended spindle lengths and the effective muscle innervation are communicated via a descending pathway to activate the Œ≥- and Œ±-motoneurons, respectively (Li et al., 2015). The mapping from the intended arm trajectory to the intended spindle lengths via Œ≥-innervation is mainly determined by the joint geometry. The mapping from the intended arm trajectory to the force-generating Œ±-innervation, however, needs to also take account of the internal and external forces, and this is engaging our network ùëæ.
When we prepare an arm movement, spindles in antagonistic muscle pairs that measure the muscle length are tightened or relaxed before the movement starts (Papaioannou and Dimitriou, 2021). According to the classical equilibrium-point hypothesis (Feldman and Levin, 2009; Latash, 2010), top-down input adjusts the activation threshold of the spindles through (Œ≥-) innervation from the spinal cord so that slight deviations from the equilibrium position can be signaled (Figure 3a). We postulate that this Œ≥-innervation acts also during the movement, setting an instantaneous target ùíñùíê*(t) for the spindle lengths. The effective lengths of the muscle spindles is ùíñùíê, and the spindles are prospectively signaling back the deviation from the target through the Ia-afferents (Dimitriou and Edin, 2010; Dimitriou, 2022). The low-pass filtered Ia-afferents may be approximated by a threshold-nonlinearity, Ia=Œ≤‚åäùíñùíê‚àíùíñùíê*‚åã+, with Œ≤ being interpreted as spindle gain (Latash, 2018). Combining the feedback from agonistic and antagonistic muscle pairs allows for extracting the scaled target error Œ≤ùíÜ‚Äæùíê*=Œ≤(ùíñùíê*‚àíùíñùíê). Taking account of the prospective feedback, we postulate the moving equilibrium hypothesis according to which the instructional inputs, ùíì‚Äæin, the spindle feedback, Œ≤ùíÜ‚Äæùíê*, and the muscle lengths, ùíñùíê, are at any point of the movement in a dynamic equilibrium. The moving equilibrium hypothesis extends the classical equilibrium-point hypothesis from the spatial to the temporal domain (for a formal definition of a moving equilibrium see Methods, Sect. From implicit to explicit differential equations).
Prediction errors are also reduced when motor units within a muscle are recruited according to the size principle (Senn et al., 1997), which itself was interpreted in terms of the physical least-action principle (Senn et al., 1995). With regard to the interpretation of the prospective feedback error ùíÜùíê* as spindle activity, it is worth noticing that in humans the spindle activity is not only ahead of the muscle activation (Dimitriou and Edin, 2010), but also share the property of a motor error (Dimitriou, 2016). The experiments show that during the learning of a gated hand movement, spindle activity is initially stronger when making movement errors, and it returns back to baseline with the success of learning. This observation is consistent with the NLA principle, saying that the proprioceptive prediction errors are minimized through the movement learning. We next address how the synaptic strengths ùëæ involved in producing the muscle length can be optimally adapted to capture this learning.

Local plasticity at basal synapses minimizes the global cost in real time
The general learning paradigm starts with input time series rin(t),i and target time series uo*(t), while assuming that the target series are an instantaneous function of the low-pass filtered input series, ùíñùíê*(t)=ùë≠*(ùíìin(t)). The low-pass filtering in the individual inputs could be with respect to any time constant œÑin,i* (that may also be learned, see Appendix 2). Yet, for simplicity, we assume the same time constant œÑ for low-pass filtering the rates of the network neurons and input neurons. The goal of learning is to adapt the synaptic strengths ùëæ in the student network so that this moves towards the target mapping, ùë≠W‚Üíùë≠*. The local synaptic plasticity will also reduce the global cost C defined on the output neurons o in terms of the deviation of the voltage from the target, uo*‚àíuo (Equation 2).
The problem of changing synaptic weights to correct the behavior of downstream neurons, potentially multiple synapses away, is typically referred to as the credit assignment problem and is notoriously challenging in physical or biological substrates operating in continuous time. A core aspect of the NLA principle is how it relates the global cost C to the Lagrangian L and eventually to somato-dendritic prediction errors ùíÜ‚Äæ that can be reduced through local synaptic plasticity ùëæÀô. We define this synaptic plasticity as a partial derivative of the Lagrangian with respect to the weights, ùëæÀô‚àù‚àí‚àÇL‚àÇùëæ=ùíÜ‚Äæùíì‚ÄæT. Since the somatodendritic mismatch error is ùíÜ‚Äæ=ùíñ‚àíùëæùíì‚Äæ, this leads to the local learning rule of the form ‚Äòpostsynaptic error times low-pass filtered presynaptic rate‚Äô,
The plasticity rule runs simultaneously to the neuronal dynamics in the presence of a given nudging strength Œ≤ that tells how strongly the voltage of an output neuron is pushed towards the target, uo‚Üíuo*. The learning rule is local in space since ùëæùíì‚Äæ is represented as a voltage of the basal dendrites, and the somatic voltage ùíñ may be read out at the synaptic site on the basal dendrite from the backpropagating action potentials that sample ùíñ at a given time (Urbanczik and Senn, 2014). The basal voltage ùëæùíì‚Äæ becomes the dendritic prediction of the somatic activity ùíñ, interpreting Equation 8 as ‚Äòdendritic predictive plasticity‚Äô.
We have derived the neuronal dynamics as a path that keeps the action stationary. Without an external teaching signal, the errors vanish, and the voltage trajectory wriggles on the bottom of the energy landscape (L=0, Figure 1b2). If the external nudging is turned on, Œ≤&gt;0, errors emerge and hills grow out of the landscape. The trajectory still tries to locally minimize the action, but it is lifted upwards on the hills (L&gt;0, Figure 1b2). Synaptic plasticity reshapes the landscape so that, while keeping Œ≤ fixed, the errors are reduced and the landscape again flattens. The transformed trajectory settles anew in another place (inside the ‚Äòvolcano‚Äô in 1b2). Formally, the local plasticity rule (Equation 8) is shown to perform gradient descent on the Lagrangian and hence on the action. In the energy landscape picture, plasticity ‚Äòshovels off‚Äô energy along the voltage path so that this is lowered most efficiently. The error that is back-propagated through the network tells at any point on the voltage trajectory how much to ‚Äòdig‚Äô in each direction, i.e., how to adapt the basal input in each neuron in order to optimally lower the local error.
The following theorem tells that synaptic plasticity ùëæÀô pushes the network mapping ùíñùíê=ùë≠W(ùíì‚Äæin) towards the target mapping ùíñùíê*=ùë≠*(ùíì‚Äæin) at any moment in time. The convergence of the mapping is a consequence of the fact the plasticity reduces the Lagrangian L=EM+Œ≤C along its gradient.

Theorem 1 (real-time dendritic error propagation, rt-DeEP)
Consider an arbitrary network ùëæ with voltage and error dynamics following Equation 7a, Equation 7b. Then the local plasticity rule ùëæÀô‚àùùíÜ‚Äæùíì‚ÄæT Equation 8, acting at each moment along the voltage trajectories, is gradient descent
The gradient statements hold at any point in time (long enough after initialization), even if the input trajectories ùíìin(t) contain delta functions and the target trajectories ùíñùíê*(t) contain step functions.
Loosely speaking, the NLA enables the network to localize in space and time an otherwise global problem: what is good for a single neuron (the local plasticity) becomes good for the entire network (the gradient on the global cost). Learning is possible at any point in time along the trajectory because the NLA inferred a prospective voltage dynamics expressed in prospective firing rates ri and prospective errors ei of the network neurons. In the limit of strong nudging (Œ≤‚Üí‚àû), the learning rule performs gradient descent on the mismatch energies EMi in the individual neurons. If the network architecture is powerful enough so that after learning all the mismatch energies vanish, EMi=0, then the cost will also vanish, C=12‚Äñùíñùíê*‚àíùíñùíê‚Äñ2=0. This is because for the output neurons, the mismatch error includes the target error (Equation 7b). In the limit of weak nudging (Œ≤‚Üí0), the learning rule performs gradient descent on C, and with this also finds a local minimum of the mismatch energies.
In the case of weak nudging and a single steady-state equilibrium, the NLA algorithm reduces to the Equilibrium Propagation algorithm (Scellier and Bengio, 2017) that minimizes the cost C for a constant input and a constant target. In the case of strong nudging and a single steady-state equilibrium, the NLA principle reduces to the Least-Control Principle (Meulemans et al., 2022) that minimizes the mismatch energy EM for a constant input and a constant target, with the apical prediction error becoming the prediction error from standard predictive coding (Rao and Ballard, 1999). While in the Least-Control Principle, the inputs and outputs are clamped to fixed values, the output errors are backpropagated and the network equilibrates in a steady state where the corrected network activities reproduce the clamped output activities. This state is called the ‚Äòprospective configuration‚Äô in Song et al., 2024 because neurons deep in the network are informed about the distal target already during the inference, and are correspondingly adapted to be consistent with this distal target. In the NLA principle, after an initial transient, the network always remains in the moving equilibrium due to the prospective coding. While inputs and targets dynamically change, the network moves along a continuous sequence of prospective configurations.
In the motor control example, the theorem tells that a given target motor trajectory ùíñùíê*(t) is learned to be reproduced with the forward model ùíñùíê(t)=ùë≠W(ùíì‚Äæin(t)), by applying the dendritic predictive plasticity for the network neurons (Equation 8). We next exemplify the theory by looking into the brain, reproducing cortical activity, and showing how a multi-layer cortical network can learn a sensory-motor mapping while staying in a moving equilibrium throughout the training.

Reproducing intracortical EEG recordings and recognizing handwritten digits
As an illustration, we consider a recurrently connected network that learns to represent intracortical electroencephalogram (iEEG) data from epileptic patients (Figure 3b). For each electrode, we assign a neuron within this network to represent the activity of the cell cluster recorded in the corresponding iEEG signal via its membrane potential. During learning, a randomly selected subset of electrode neurons are nudged towards the target activity from recorded data while learning to be reproduced by the other neurons. After learning, we can present only a subset of electrode neurons with previously unseen recordings and observe how the activity of the other neurons closely matches the recordings of their respective electrodes (Figure 3c). The network derived from NLA is thus able to learn complex correlations between signals evolving in real-time by embedding them in a recurrent connectivity structure.
As an example of sensory-motor processing in the NLA framework, we next consider a well-studied image recognition task, here reformulated in a challenging time-continuous setting, and interpreted as a motor task where 1 out of 10 fingers has to be bent upon seeing a corresponding visual stimulus (see Figure 3). In the context of our moving equilibrium hypothesis, we postulate that during the learning phase, but not the testing phase, an auditory signal identifies the correct finger and sets the target spindle lengths of 10 finger flexors, ùíñùíê*(t). The target spindle length encodes the desired contraction of a flexor muscle in the correct finger upon the visual input ùíìin(t), and a corresponding relaxation for the nine incorrect fingers.
We train a hierarchical three-layer network on images of handwritten digits (MNIST, LeCun, 1998), with image presentation times between 0.5œÑ (=5 ms) and 20œÑ (=200 ms, with œÑ=10 the membrane time constant). Figure 4a-c depict the most challenging scenario with the shortest presentation time. Synaptic plasticity is continuously active, despite the network never reaching a temporal steady state (Figure 4b1). Due to the lookahead firing rates in the NLA, the mismatch errors e‚Äæi(t) represent the correct gradient and propagate without lag throughout the network. As a consequence, our mismatch errors are almost equal to the errors obtained from classical error backpropagation applied at each time step to the purely forward network (i.e. the network that suppresses the error-correction ùíÜ‚Äæ of the voltage and instead considers the ‚Äòclassical‚Äô voltage ùíñl=ùëælœÅ(ùíñl‚àí1) only, see blue dots in Figure 4b2). The network eventually learned to implement the mapping ùíñùíê=ùë≠W(ùíì‚Äæin)‚âàùíñùíê* with a performance comparable to error-backpropagation at each dt, despite the short presentation time of only 5 ms (Figure 4c1). The approximation is due to the fact that the NLA learns an instantaneous mapping from the low-pass filtered input rates ùíì‚Äæin to the output voltage ùíñùíê, while the mapping from the original input rates ùíìin to the voltages ùíñ1 of the first-layer neurons (and hence also to the output voltages ùíñùíê) is delayed by œÑin. Since in the simulations, the target voltages ùíñùíê* were switched instantaneously with ùíìin (and not with ùíì‚Äæin), however, a mismatch error between ùíñùíê and ùíñùíê* remains for stimulus presentation times shorter than œÑin (Figure 4c2). The Latent Equilibrium (Haider et al., 2021) avoids these temporal limitations by implementing an instantaneous mapping on the rates instead on the voltages (Methods, Sect. From implicit to explicit differential equations).
Figure 4: On-the-fly learning of finger responses to visual input with real-time dendritic error propagation (rt-DeEP). (a) Functionally feedforward network with handwritten digits as visual input (ùíìin(2)(t) in Figure 3a, here from the MNIST data set, 5 ms presentation time per image), backprojections enabling credit assignment, and activity of the 10 output neurons interpreted as commands for the 10 fingers (forward architecture: 784√ó500√ó10 neurons). (b) Example voltage trace (b1) and local error (b2) of a hidden neuron in neuronal least-action (NLA) (red) compared to an equivalent network without lookahead rates (orange). Note that neither network achieves a steady state due to the extremely short input presentation times. Errors are calculated via exact backpropagation, i.e., by using the error backpropagation algorithm on a pure feedforward NLA network at every simulation time step (with output errors scaled by Œ≤), shown for comparison (blue dots). (c) Comparison of network models during and after learning. Color scheme as in (b). (c1) The test error under NLA evolves during learning on par with classical error backpropagation performed each Euler dt based on the feedforward activities. In contrast, networks without lookahead rates are incapable of learning such rapidly changing stimuli. (c2) With increasing presentation time, the performance under NLA further improves, while networks without lookahead rates stagnate at high error rates. This is caused by transient, but long-lasting misrepresentation of errors following stimulus switches: when plasticity is turned off during transients and is only active in the steady state, comparably good performance can be achieved (dashed orange). (d) Receptive fields of 6 hidden-layer neurons after training, demonstrating that even for very brief image presentation times (5ms), the combined neuronal and synaptic dynamics are capable of learning useful feature extractors such as edge filters.
The instantaneous voltage propagation relieves an essential constraint of previous models of bio-plausible error backpropagation (e.g. Scellier and Bengio, 2017; Whittington and Bogacz, 2017; Sacramento et al., 2018), with reviews (Richards et al., 2019; Whittington and Bogacz, 2019; Lillicrap et al., 2020): without lookahead firing rates, networks need much longer to correctly propagate errors across layers, with each layer roughly adding another membrane time constant of 10 ms, and thus cannot cope with realistic input presentation times. In fact, in networks without lookahead output, learning is only successful if plasticity is switched off while the network dynamics did not reach a stationary state during a stimulus presentation interval (Figure 4c2). Notice also that the prospective coding is necessary to keep the network activity stable for an instantaneous processing of the sensory input. If, in the absence of prospective coding, we would only shrink the membrane time constant to 0, the recurrent error processing would become unstable (see Appendix 3).

Implementation in cortical microcircuits
So far, we did not specify how errors ùíÜ appearing in the differential equation for the voltage (Equation 7a) are transmitted across the network in a biologically plausible manner. Building on Sacramento et al., 2018, we propose a cortical microcircuit to enable this error transport, with all neuron dynamics evolving according to the NLA principle. Although the idea applies to arbitrarily connected networks, we use the simpler case of functionally feedforward networks to illustrate the flow of information in these microcircuits (Figure 5a).
Figure 5: Hierarchical plastic microcircuits implement real-time dendritic error learning (rt-DeEL). (a) Microcircuit with ‚Äòtop-down‚Äô input (originating from peripheral motor activity, blue line) that is explained away by the lateral input via interneurons (dark red), with the remaining activity representing the error e‚Äæl. Plastic connections are denoted with a small red arrow and nudging with a dashed line. (b1) Simulated network with 784-300-10 pyramidal-neurons and a population of 40 interneurons in the hidden layer used for the MNIST learning task where the handwritten digits have to be associated with the 10 fingers. (b2) Test errors for rt-DeEL with joint tabula rasa learning of the forward and lateral weights of the microcircuit. A similar performance is reached as with classical error backpropagation. For comparability, we also show the performance of a shallow network (dashed line). (b3) Angle derived from the Frobenius norm between the lateral pathway ùëæIPlùëæPIl and the feedback pathway ùë©lùëæl+1. During training, both pathways align to allow correct credit assignment throughout the network. Indices are dropped in the axis label for readability.
For such an architecture, pyramidal neurons in area l (that is a ‚Äòlayer‚Äô of the feedforward network) are accompanied by a pool of interneurons in the same layer (area). The dendrites of the interneurons integrate in time (with time constant œÑ) lateral input from pyramidal neurons of the same layer (ùíìl) through plastic weights ùëæIPl. Additionally, interneurons receive ‚Äòtop-down nudging‚Äô from pyramidal neurons in the next layer through randomly initialized and fixed back projecting synapses ùë©IPl targeting the somatic region, and interneuron nudging strength Œ≤I. The notion of ‚Äòtop-down‚Äô originates from the functionally feed-forward architecture leading from sensory to ‚Äòhigher cortical areas.‚Äô In the context of motor control, the highest ‚Äòarea‚Äô is the last stage controlling the muscle lengths, being at the same time the first stage for the proprioceptive input (Figure 3a).
According to the biophysics of the interneuron, the somatic membrane potential becomes a convex combination of the two types of afferent input (Urbanczik and Senn, 2014),
In the biological implementation, the feedback input is mediated by the low-pass filtered firing rates ùíì‚Äæl+1=œÅ(ùíñl+1), not by ùíñl+1 as expressed in the above equation. Yet, we argue that for a threshold-linear œÅ the ‚Äòtop-down nudging‚Äô by the rate ùíì‚Äæl+1 is effectively reduced to a nudging by the voltage ùíñl+1. This is because errors are only backpropagated when the slope of the transfer function is positive, ùíìl+1‚Ä≤&gt;0, and hence when the upper-layer voltage is in the linear regime. For more general transfer functions, we argue that short-term synaptic depression may invert the low-pass filtered presynaptic rate back to the presynaptic membrane potential, ùíì‚Äæl+1‚Üíùíñl+1, provided that the recovery time constant œÑ matches the membrane time constant (see end of Results and Appendix 1).
Apical dendrites of pyramidal neurons in each layer receive top-down input from the pyramidal population in the upper layer through synaptic weights ùë©l. These top-down weights could be learned to predict the lower-layer activity (Rao and Ballard, 1999) or to become the transposed of the forward weight matrix (ùë©l=ùëæl+1T, Max et al., 2022), but for simplicity, we randomly initialized them and keep them fixed (Lillicrap et al., 2020). Besides the top-down projections, the apical dendrites also receive lateral input via an interneuron population in the same layer through synaptic weights ‚àíùëæPIl that are plastic and will be learned to obtain suitable dendritic errors. The ‚Äò-‚Äô sign is suggestive of these interneurons to subtract away the top-down input entering through ùë©l (while the weights can still be positive or negative). Assuming again a conversion of rates to voltages, also for the inhibitory neurons that may operate in a linear regime, the overall apical voltage becomes
What cannot be explained away from the top-down input ùë©lùíñl+1 by the lateral feedback, ‚àíùëæPIlùíñIl, remains as dendritic prediction error ùíÜ‚ÄælA in the apical tree (Figure 5a). If the top-down and lateral feedback weights are learned as outlined next, these apical prediction errors take the role of the backpropagated errors in the classical backprop algorithm.
To adjust the interneuron circuit in each layer (‚Äòarea‚Äô), the synaptic strengths from pyramidal-to-interneurons, ùëæIPl, are learned to minimize the interneuron mismatch energy, ElIP=12‚ÄñulI‚àíWlIPr¬Øl‚Äñ2. The interneurons, while being driven by the lateral inputs ùëæIPlùíì‚Äæl, learn to reproduce the upper-layer activity that also nudges the interneuron voltage. Learning is accomplished if the upper-layer activity, in the absence of an additional error on the upper layer, is fully reproduced in the interneurons by the lateral input.
Once the interneurons learn to represent the ‚Äòerror-free‚Äô upper-layer activity, they can be used to explain away the top-down activities that also project to the apical trees. The synaptic strengths from the inter-to-pyramidal neurons, ùëæPIl, are learned to minimize the apical mismatch energy, ElPI=12‚Äñe¬ØlA‚Äñ2=12‚ÄñBlul+1‚àíWlPIulI‚Äñ2. While in the absence of an upper-layer error, the top-down activity ùë©lùíñl+1 can be fully cancelled by the interneuron activity ùëæPIlùíñIl, a neuron-specific error will remain in the apical dendrites of the lower-level pyramidal neurons if there is an error endowed in the upper-layer neurons. Gradient descent learning on these two energies results in the learning rules for the P-to-I and I-to-P synapses,
The following theorem on dendritic error learning tells that the plasticity in the lateral feedback loop leads to an appropriate error representation in the apical dendrites of pyramidal neurons.

Theorem 2 (real-time dendritic error learning, rt-DeEL)
Consider a cortical microcircuit composed of pyramidal and interneurons, as illustrated in Figure 5a, with more interneurons in layer (‚Äòcortical area‚Äô) l than pyramidal neurons in layer l+1, and with adaptable pyramidal-to-inhibitory weights ùëæIPl within the same layer that are nudged through top-down weights ùë©IPl, see Methods, Sect. Proving theorem 2 (rt-DeEL). Then, for suitable top-down nudging, learning rates, and initial conditions, the inhibitory-to-pyramidal synapses ùëæPIl within each layer l (Equation 11) evolve such that the lateral feedback circuit aligns with the bottom-up-top-down feedback circuit,
After this horizontal-to-vertical circuit alignment, the apical voltages ùíÜ‚ÄælA=ùë©lùíñl+1‚àíùëæPIlùíñIl of the layer-l pyramidal neurons (Equation 13) represent the ‚ÄòB-backpropagated‚Äô errors, ùíÜ‚ÄælA=ùë©lùíÜ‚Äæl+1. When modulated by the postsynaptic rate derivatives, ùíì‚Äæl‚Ä≤=ùùÜ‚Ä≤(ùíñ‚Äæl), the apical voltages yield the appropriate error signals
for learning the forward weights ùëæl according to ùëæÀôl‚àùùíÜ‚Äælùíì‚Äæl‚àí1T Equation 8.
The back projecting weights can also be learned by a local real-time learning rule to become transpose of the forward weights, ùë©l=ùëæl+1T (Max et al., 2022). In this case, the error signals ùíÜ‚Äæl learned in the apical dendrites according to the above Theorem (Equation 13) represent the gradient errors ùíÜ‚Äæ appearing in the real-time dendritic error propagation (rt-DeEP, Theorem 1). There, the errors ùíÜ‚Äæ drive the gradient plasticity of the general weight matrix ùëæ, split up here into the forward weights ùëæl to a layer l (for l=1,..,N).

Simultaneously learning apical errors and basal signals
Microcircuits following these neuronal and synaptic dynamics are able to learn the classification of hand-written digits from the MNIST dataset while learning the apical signal representation (Figure 5b1, b2). In this case, feedforward weights ùëæl and lateral weights WlPI and WlIP are all adapted simultaneously. Including the WlIPÀô-plasticity (by turning on the interneuron nudging from the upper layer, Œ≤I&gt;0 in Equation 9), greatly speeds up the learning.
With and without WlIPÀô-plasticity, the lateral feedback via interneurons (with effective weight WlIPWlPI) learns to align with the forward-backward feedback via upper layer pyramidal neurons (with effective weight ùë©lùëæl+1, Figure 5b3). The microcircuit extracts the gradient-based errors (Equation 13), while the forward weights use these errors to reduce these errors to first minimize the neuron-specific mismatch errors, and eventually the output cost.
Since the apical voltage ùíÜ‚ÄælA appears as a postsynaptic factor in the plasticity rule for the interneurons (WlPIÀô), this I-to-P plasticity can be interpreted as Hebbian plasticity of inhbitory neurons, consistent with earlier suggestions (Vogels et al., 2011; Bannon et al., 2020). The plasticity WlIPÀô of the P-to-I synapses, in the same way as the plasticity for the forward synapses ùëæÀôl, can be interpreted as learning from the dendritic prediction of somatic activity (Urbanczik and Senn, 2014).
Crucially, by choosing a large enough interneuron population, the simultaneous learning of the lateral microcircuit and the forward network can be accomplished without fine-tuning of parameters. As an instance in case, all weights shared the same learning rate. Such stability bolsters the biophysical plausibility of our NLA framework and improves over the previous, more heuristic approach (Sacramento et al., 2018; Mesnard et al., 2019). The stability may be related to the nested gradient descent learning according to which somatic and apical mismatch errors in pyramidal neurons, and somatic mismatch errors in inhibitory neurons are minimized.
Finally, since errors are defined at the level of membrane voltages (Equation 11), synapses need a mechanism by which they can recover the presynaptic voltage errors from their afferent firing rates. While for threshold-linear transfer functions the backpropagated voltage errors translate into rate errors (Appendix 1), more general neuronal nonlinearities must be matched by corresponding synaptic nonlinearities. Pfister et al., 2010 have illustrated how spiking neurons can leverage short-term synaptic depression to estimate the membrane potential of their presynaptic partners. Here, we assume a similar mechanism in the context of our rate-based neurons. The monotonically increasing neuronal activation function, ùíì‚Äæl+1=œÅ(ùíñl+1), can be approximately compensated by a vesicle release probability that monotonically decreases with the low-pass filtered presynaptic rate ùíì‚Äæl+1 (see Appendix 1 and Appendix 1‚Äîfigure 1). If properly matched, this leads to a linear relationship between the presynaptic membrane potential ùíñl+1 and the postsynaptic voltage contribution.


DISCUSSION
We introduced a least-action principle to neuroscience for deriving the basic laws of the voltage and synaptic dynamics in networks of cortical neurons. The approach is inspired by the corresponding principle in physics where basic laws of motion are derived across the various scales. While in physics the action is defined as the time-integral of the kinetic minus potential energy, we define the action as the time-integral of instantaneous somatodendritic mismatch errors across network neurons plus a behavioral error. The ‚Äòkinetics‚Äô of a voltage trajectory only arises because we postulate that the action along a trajectory is minimized with respect to future voltages, not the instantaneous voltage, as would be done in physics. The postulate implies a prospective voltage dynamics that look ahead in time, together with prospective local errors, in order to minimize the action and hence the somatodendritic mismatch errors. The prospective errors nudge the firing of pyramidal neurons deep in the brain, so that motor neurons improve the output of the network right in time. A putative behavioral error, encoded in the motor feedback, propagates back through the network and produces prospective corrections of the pyramidal neuron activities that effectively manifest in instantaneous corrections of the motor trajectory. Through this prospective coding, the sensory stream, the deep network activity, and the motor feedback are in sync at any moment in time. We formulated the dynamic synchronization as a ‚Äòmoving equilibrium hypothesis‚Äô, referring to the classical equilibrium point hypothesis for motor control (Feldman and Levin, 2009; Latash, 2010). More generally, the brain activity formed by the prospective firing of cortical pyramidal neurons is in a moving equilibrium while converting sensory input streams into motor outputs, consistent with prospective sensory processing in the human cortex (Blom et al., 2020).
Because the neuronal dynamics derived from the global NLA principle is in a moving equilibrium, the prospective dendritic errors that globally correct the output trajectory are also suited to instruct local synapatic plasticity in the dendrites. In fact, working down the apical errors by adapting the sensory-driven synapses on the basal dendrites reduces the global output errors in real time. The apical errors are extracted from the top-down feedback via lateral ‚Äòinhibition‚Äô that tries to cancel the top-down signal. This top-down feedback includes activity from a putative erroneous motor output that was not foreseen by the local inhibition and thus survives as a local apical error. Given the prospective coding of the pyramidal neurons, the dendritic errors are also prospective and thus able to induce the correct error-minimizing plasticity online, while stimuli and targets continuously change.
The NLA principle as a bottom-up theory from neurons to behavior
To show that the NLA principle offers a viable program for a formalization of neuroscience following the example of physics, we exemplified its ramifications in dendritic computation, cortical microcircuits, synaptic plasticity, motor control, and sensory-based decision-making. The crucial point of our axiomatization is that it connects the local neuronal errors to the global behavioral errors right in the formulation of the principle, eventually leading to local gradient-based plasticity rules. Because the formulation builds upon computations that can be realized in single neurons and dendrites to produce a behavioral output, the NLA principle can be seen as a bottom-up theory of behavior. It is articulated in terms of apical and basal dendrites, somatic firing, network connectivity and behavioral outputs that jointly minimize their errors. This contrasts the related free energy principle, for instance, that leads to a top-down theory of behavior by starting with the statistical, but the more universal, notion of a free energy. It postulates that any self-organizing system, that is at a statistical equilibrium with its environment, must minimize its free energy (Friston, 2010; Friston et al., 2022), and from there work down its way to neurons and dendrites (Bastos et al., 2012; Kiebel and Friston, 2011).
Starting with a single Lagrangian function that specifies the form of the somatodendritic prediction errors leaves some freedom for the interpretation and the implementation of the emerging dynamical equations for the voltages. We interpret errors to be represented in the apical dendrites of pyramidal neurons while sensory input targets the basal dendrites, but other dendritic configurations are conceivable (Mikulasch et al., 2023) that apply also to non-pyramidal neurons. We have chosen a specific interneuron circuitry to extract our apical errors, but other microcircuits or error representations might also be considered (Keller and Mrsic-Flogel, 2018). On the other hand, the derived gradient-based synaptic plasticity is tightly linked to the specific form of the somatodendritic prediction errors expressed in the Lagrangian and its interpretation, making specific predictions for synaptic plasticity (as outlined below). The ‚Äòexternal‚Äô feedback entering through the cost function offers additional freedom to model behavioral interactions. We considered an explicit time course of a target voltage in motor neurons, for instance imposed by the feedback from muscle spindles that are themselves innervated by a prospective top-down signal to control muscle lengths (Papaioannou and Dimitriou, 2021; Dimitriou, 2022). But the cost may also link to reinforcement learning and express a delayed reward feedback delivered upon a behavioral decision of an agent acting in a changing environment (Friedrich et al., 2011; Friedrich and Senn, 2012).
A fundamental difficulty arises when the neuronal implementation of the Euler-Lagrange equations requires an additional microcircuit with its own dynamics. This is the case for the suggested microcircuit extracting the local errors. Formally, the representation of the apical feedback errors first needs to be learned before the errors can teach the feedforward synapses on the basal dendrites. We showed that this error learning can itself be formulated as minimizing an apical mismatch energy. What the lateral feedback through interneurons cannot explain away from the top-down feedback remains an apical prediction error. Ideally, while the network synapses targetting the basal tree are performing gradient descent on the global cost, the microcircuit synapses involved in the lateral feedback are performing gradient descent on local error functions, both at any moment in time. The simulations show that this intertwined system can in fact learn simultaneously with a common learning rate that is properly tuned. The cortical model network of inter- and pyramidal neurons learned to classify handwritten digits on the fly, with 10-digit samples presented per second. Yet, the overall learning is more robust if the error learning in the apical dendrites operates in phases without output teaching but with corresponding sensory activity, as may arise during sleep (see e.g., Deperrois et al., 2022; Deperrois et al., 2024).

The NLA principle integrates classical theories for cortical processing and learning
The prospective variational principle introduced with the NLA allows for integrating previous ideas on formalizing the processing and learning in cortical networks. Four such classical lines of theories come together. (i) The first line refers to the use of an energy function to jointly infer the neuronal dynamics and synaptic plasticity, originally formulated for discrete-time networks (Hopfield, 1982; Ackley et al., 1985), and recently extended to continuous-time networks (Scellier and Bengio, 2017). (ii) The second line refers to understanding error-backpropagation in the brain (Rumelhart et al., 1986; Xie and Seung, 2003; Whittington and Bogacz, 2017; Whittington and Bogacz, 2019; Lillicrap et al., 2020). (iii) The third line refers to dendritic computation and the use of dendritic compartmentalization for various functions such as nonlinear processing (Schiess et al., 2016; Poirazi and Papoutsi, 2020) and deep learning (Guerguiev et al., 2017; Sacramento et al., 2018; Haider et al., 2021). (iv) The fourth line refers to predictive coding (Rao and Ballard, 1999) and active inference (Pezzulo et al., 2022) to improve the sensory representation and motor output, respectively.

The NLA integrates and predicts features of synapses, dendrites, and circuits
Motivated by the predictive power of the least-action principle in physics, we ask about experimental confirmation and predictions of the NLA principle. Given its axiomatic approach, it appears astonishing to find various preliminary matches at the dendritic, somatic, interneuron, synaptic, and even behavioral levels. Some of these are:
More experimental and theoretical work is required to substantiate these links and test specific predictions, such as the apical error representation in cortical pyramidal neurons.
Overall, our approach adapts the least-action principle from physics to be applied to neuroscience, and couples it with a normative perspective on the prospective processing of neurons and synapses in global cortical networks and local microcircuits. Given its physical underpinnings, the approach may inspire the rebuilding of computational principles of cortical neurons and circuits in neuromorphic hardware (Bartolozzi et al., 2022). A step in this direction, building on the instantaneous computational capabilities by slowly integrating neurons, has made done by Haider et al., 2021. Given its aspiration for a theoretical framework in neurobiology, a next challenge would be to generalize the NLA principle to spiking neurons (Gerstner and Kistler, 2002; Brendel et al., 2020) with their potential for hardware implementation (Zenke and Ganguli, 2018; G√∂ltz et al., 2021; Cramer et al., 2022), to include attentional mechanisms in terms of dendritic gain modulation (Larkum et al., 2004) with a putative link to self-attention in artificial intelligence (Vaswani et al., 2017), to add second-order errors to cope with certainties (Granier et al., 2023), and to incorporate longer temporal processing as, for instance, offered by neuronal adaptation processes (La Camera et al., 2006) or realistically modelled dendrites (Chavlis and Poirazi, 2021).


METHODS
Euler-Lagrange equations as inverse low-pass filters
The theory is based on the look-ahead of neuronal quantities. In general, the look-ahead of a trajectory x(t) is defined via lookahead operator applied to x,
The lookahead operator is the inverse of the low-pass filter operator denoted by a bar,
This low-pass filtering can also be characterized by the differential equation œÑx‚ÄæÀô(t)=‚àíx‚Äæ(t)+x(t), see Appendix 2. Hence, applying the low-pass filtering to x and then the lookahead operator (1+œÑddt) to x‚Äæ(t), and using the Leibnitz rule for differentiating an integral, we calculate (1+œÑddt)x‚Äæ(t)=x(t). In turn, applying first the lookahead, and then the low-pass filtering, also yields the original trace back, (1+œÑddt)x=x‚Äæ+œÑx‚ÄæÀô=x.
We consider an arbitrary network architecture with network neurons that are recurrently connected and that receive external input through an overall weight matrix ùëæ=(ùëæin,ùëænet), aggregated column-wise. The instantaneous presnyaptic firing rates are ùíì=(ùíìin,ùíìnet)T, interpreted as a single-column vector. A subset of network neurons are output neurons, O‚äÜN, for which target voltages ùíñ* may be imposed. Rates and voltages may change in time t. Network neurons are assigned a voltage ùíñ, generating the low-pass filtered rate ùíì‚Äænet=œÅ(ùíñ), and a low-pass filtered error ùíÜ‚Äæ=ùíñ‚àíùëæùíì‚Äæ. We further define output errors e‚Äæo*=uo*‚àíuo for o‚ààO, and e‚Äæi*=0 for non-output neurons i‚ààN‚àñO. With this, the Lagrangian from Equation 3 takes the form
We next use that ùíñ=ùíñ~‚àíœÑùíñ~Àô, with the .~ operator defined in Equation 4, to write out the Lagrangian L in the canonical coordinates (ùíñ~,ùíñ~Àô) as (see also Equation 3)
The neuronal dynamics is derived from requiring a stationary action (see Equation 5), which is generally solved by the Euler-Lagrange equations ‚àÇL‚àÇu~i‚àíddt‚àÇL‚àÇu~Àôi=0 (see Equation 6). Because u~ only arises in L in the compound u~‚àíœÑu~Àô, the derivative of L with respect to u~ is identical to the derivative with respect to œÑu~Àô,
Using the lookahead operator Equation 14, the Euler-Lagrange equations can then be rewritten as
Since L(ùíñ~,ùíñ~Àô)=L(ùíñ) and ùíñ=ùíñ~‚àíœÑùíñ~Àô, the derivative of L with respect to ùíñ~ is the same as the derivative of L with respect to ùíñ,
Plugging this into Equation 19, the Euler-Lagrange equations become a function of ùíñ and ùíñÀô,
Notice that, if we had directly calculated ‚àÇL‚àÇu~i‚àíddt‚àÇL‚àÇu~Àôi=0, the second-order time derivative u~¬®i of the discounted future voltage would be absorbed in a first-order time derivative of the voltage. The reason is that u~Àôi‚àíœÑu~¬®i=uÀôi, and u~¬®i only arises in this combination because the Lagrangian L=L(ùíñ) is only a function of ùíñ and not of ùíñÀô. Hence, the acceleration term u~¬®i disappears, while a voltage derivative uÀôi appears.
The solution of this differential Equation 20 is ‚àÇL‚àÇui=cie‚àít‚àít0œÑ, and hence any trajectory (u~i,u~Àôi) which satisfy the Euler-Lagrange equations will hence cause ‚àÇL‚àÇui to converge to zero with a characteristic time scale of œÑ. Since we require that the initialisation is at t0=‚àí‚àû, we conclude that ‚àÇL‚àÇui=0, as required in the rt-DeEP Theorem. For a table with all the mathematical abbreviations see Methods-Table 1.

Deriving the network dynamics from the Euler-Lagrange equations
We now derive the equations of motion from the Euler-Lagrange equations. Noticing that ùíñ enters in ùíÜ‚Äæ=ùíñ‚àíùëæùíì‚Äæ twice, directly and through ùíì‚Äænet=œÅ(ùíñ), and once in the output error ùíÜ‚Äæ*, we calculate from 16, using ùíì‚Äæ(ùíñ)=(ùíì‚Äæin,œÅ(ùíñ))T and ùëæ=(ùëæin,ùëænet),
Remember that for non-output neurons i no target exists, and for those we set ùíÜ‚Äæi*=0. Next, we apply the lookahead operator to this expression, as required by the Euler-Lagrange Equation 19. In general (1+œÑddt)ùíô‚Äæ=ùíô‚Äæ+œÑùíô‚ÄæÀô=x, and we set for ùíô‚Äæ the expression on the right-hand side of Equation 21, ùíô‚Äæ=ùíÜ‚Äæ‚àíùùê‚Äæ‚àíŒ≤ùíÜ‚Äæ*, which at the same time is ùíô‚Äæ=‚àÇL‚àÇùíñ. Hence, the Euler-Lagrange equations in the form of Equation 20, (1+œÑddt)x‚Äæ=0, translate into
To move from the middle to the last equality we replaced ùíÜ with  ùíÜ=(1+œÑddt)ùíÜ‚Äæ=ùíñ+œÑùíñÀô‚àíùëæùíì. In the last equality we interpret ùíÜ as the sum of the two errors, ùíÜ=ùùê+Œ≤ùíÜ*, again using the middle equality. This proves Equation 7a, Equation 7b.
Notice that the differential equation œÑùíñÀô=... in Equation 22 represents an implicit ordinary differential equation as on the right-hand side not only ùíñ, but also ùíñÀô appears (in ùíì and ùíÜ). The uniqueness of the solution ùíñ(t) for a given initial condition is only guaranteed if it can be converted into an explicit ordinary differential equation (see Sect. Appendix 3).
In taking the temporal derivative we assumed small learning rates such that terms including WÀôij can be neglected. The derived dynamics for the membrane potential of a neuron ui in Equation 22 show the usual leaky behavior of biological neurons. However, both presynaptic rates r‚Äæi and prediction errors e‚Äæi enter the equation of motion with lookaheads, i.e., they are advanced (ri=r‚Äæi+œÑr‚ÄæÀôi and ei=e‚Äæi+œÑe‚ÄæÀôi), cancelling the low-pass filtering. Since r‚ÄæÀôi=œÅ‚Ä≤(ui)uÀôi, the rate and error, ri and ei, can also be seen as nonlinear extrapolations from the voltage and its derivative into the future.
The instantaneous transmission of information throughout the network at the level of the voltages can now be seen by low-pass filtering Equation 22 with initialization far back in the past,
with column vector ùíì‚Äæ(ùíñ)=(ùíì‚Äæin,œÅ(ùíñ))T and ùíÜ‚Äæ=ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ+Œ≤ùíÜ‚Äæ*. Hence, solving the voltage dynamics for ùíñ (Equation 7a), with apical voltage ùíÜ=ùíÜ‚Äæ+œÑùíÜ‚ÄæÀô derived from Equation 7b, yields the somatic voltage ùíñ satisfying the self-consistency Equation 23 at any time. In other words, ùíñ and ùíÜ‚Äæ‚Äòpropagate instantaneously‚Äô.

Deriving the error backpropagation formula
For clarity, we derive the error backpropagation algorithm for layered networks here. These can be seen as a special case of a general network with membrane potentials ùíñ and all-to-all weight matrix ùëæ (as introduced in Appendix 8), where the membrane potentials decompose into layerwise membrane potential vectors ùíñl and the weight matrix into according to block diagonal matrices ùëæl (with ùëæl being the weights that project into layer l).
Assuming a network with N layers, by low-pass filtering the equations of motion we get
for all l‚àà1,..,N, with the output error ùíÜ‚Äæùíê of the general recurrent network becoming the error in the last layer, that itself is the target error, ùíÜ‚Äæùíê=ùíÜ‚ÄæN=Œ≤ùíÜ‚Äæ*=Œ≤(ùíñN*‚àíùíñN). The error ùíÜ‚Äæ=ùùê‚Äæ+Œ≤ùíÜ‚Äæ*, that we obtain from the general dynamics with ùùê‚Äæ=ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ, see Equations 21 and 22, translates to an iterative formula for the error at the current layer l given the error at the downstream layer l+1, inherited from the drive ùíì‚Äæl=œÅ(ùíñl) of that downstream layer via ùëæl+1,
and ùíÜ‚ÄæN=Œ≤ùíÜ‚Äæ* for the output layer. The learning rule that reduces ùíÜ‚Äæl by gradient descent is proportional to this error and the presynaptic rate, as stated by Theorem 1, is
for l=1...N. Equations 25 and 26 together take the form of the error backpropagation algorithm, where an output error is iteratively propagated through the network and used to adjust the weights in order to reduce the output cost C. From this, it is easy to see that without output nudging (i.e. Œ≤=0), the output error vanishes and consequently all other prediction errors vanish as well, ùíÜ‚Äæl=ùíñl‚àíùëælùíì‚Äæl=0 for all l‚â§N. This also means that in the absence of nudging, no weight updates are performed by the plasticity rule.
The learning rule for arbitrary connectivities is obtained in the same way by dropping the layer-wise notation. In this case, low-pass filtering the equations of motion yields ùíñ=ùëæùíì‚Äæ+ùíÜ‚Äæ, as calculated in 23, and the low-pass filtered error ùíÜ‚Äæ=ùùê‚Äæ+Œ≤ùíÜ‚Äæ*=ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ+Œ≤ùíÜ‚Äæ*, as inferred from Equations 21 and 22. Hence, the plasticity rule in general reads

Proving theorem 1 (rt-DeEP)
The implicit assumption in Theorem 1 is that ùíñÀô exists in the distributional sense for t&gt;‚àí‚àû, which is the case for delta-functions in ùíìin and step-functions in ùíñ*. Both parts (i) and (ii) of the Theorem are based on the requirement of stationary action Œ¥A=0, and hence on ùíñ satisfying the Euler-Lagrange equations in the form of Equation 22, (1+œÑddt)‚àÇL‚àÇùíñ=0. From the solution ‚àÇL‚àÇui=ce‚àít‚àít0œÑ we conclude that for initialization at t0=‚àí‚àû we have ‚àÇL‚àÇùíñ=0 for all t. It is the latter stronger condition that we require in the proof. With this, the main ingredient of the proof follows is the mathematical argument of Scellier and Bengio, 2017, according to which the total and partial derivative of L with respect to ùëæ are identical, and this in our case is true for any time t,
For convenience we considered ‚àÇL‚àÇùíñ to be a column vector, deviating from the standard notations (see tutorial end of sec:Integration). Analogously to Equation 28, we infer dLdŒ≤=‚àÇL‚àÇŒ≤. Reading Equation 28 from the right to the left, we conclude that the learning rule ùëæÀô‚àù‚àí‚àÇL‚àÇùëæ=ùíÜ‚Äæùíì‚ÄæT for all Œ≤&gt;0 is gradient descent on L, i.e., ùëæÀô‚àù‚àídLdùëæ. This total derivative of L can be analyzed for large and small Œ≤.
(i) We show that in the limit of large Œ≤, ùëæÀô becomes gradient descent on the mismatch energy EM=12‚ÄñùíÜ‚Äæ‚Äñ2. For this we first show that there is a solution of the self-consistency equation ùíñ=ùë≠(ùíñ)=ùëæùíì‚Äæ+ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ+Œ≤ùíÜ‚Äæ* that is uniformly bounded for all t and Œ≤. For this we assume that the transfer function œÅ(u) is non-negative, monotonically increasing, and bounded, that its derivative œÅ‚Ä≤(u) is bounded too, and that the input rates ùíìin and the target potentials ùíñùíê* are also uniformly bounded. To show that under these conditions we always find a uniformly bounded solution ùíñ(t), we first consider the case where the output voltages are clamped to the target, ùíñùíê=ùíñùíê* such that ùíÜ‚Äæ*=0. For simplicity, we assume that œÅ‚Ä≤(u)=0 for |u|‚â•c0. For voltages ùíñ with ùíñi‚â§c0 the recurrent input current ùëæùíì‚Äæ is bounded, say |(ùëæùíì‚Äæ)j|‚â§c1 for some c1&gt;c0. When including the error term ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ, the total current still remains uniformly bounded, say |ùë≠(ùíñ)j|‚â§c2 for all ùíñ with ùíñi‚â§c0. Because for larger voltages ùíñi&gt;c0 the error term vanishes due to a vanishing derivative œÅ‚Ä≤(ùíñi)=0, the mapping ùë≠(ùíñ) maps the c2-box ùíñ (for which |ùíñi|‚â§c2) onto itself. Brouwer‚Äôs fixed point theorem then tells us that there is a fixed point ùíñ=ùë≠(ùíñ) within the c2-box. The theorem requires the continuity of ùë≠, and this is assured if the neuronal transfer function r‚Äæ=œÅ(u) is continuous.
We next relax the voltages of the output neurons from their clamped stage, ùíñùíê=ùíñùíê*. Remember that these voltages satisfy ùíñùíê=(ùëæùíì‚Äæ+ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ+Œ≤ùíÜ‚Äæ*)ùíê=ùë≠(ùíñ)ùíê at any time t. We determine the correction term Œ≤ùíÜ‚Äæùíê* such that in the limit Œ≤‚Üí‚àû we get ùíñùíê=ùë≠(ùíñ)ùíê=ùíñùíê*. The correction remains finite, and in the limit must be equal to limŒ≤‚Üí‚àû‚Å°Œ≤ùíÜ‚Äæùíê*=ùíñùíê*‚àí(ùëæùíì‚Äæ+ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ)ùíê. For arbitrary large nudging strength Œ≤, the output voltage ùíñùíê deviates arbitrary little from the target voltage, ùíñùíê=ùíñùíê*+o(1/Œ≤), with target error ùíÜ‚Äæùíê*=1Œ≤(ùíñ‚àíùëæùíì‚Äæ‚àíùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ)ùíê shrinking like c2/Œ≤. Likewise, also for non-output neurons i, the self-consistency solution ùíñi=ùë≠(ùíñ)i deviates arbitrarily little from the solution of the clamped state. To ensure the smooth drift of the fixed point while 1/Œ≤ deviates from 0 we require that the Jacobian of ùë≠ at the fixed point is invertible.
Because the output ùíÜ‚Äæùíê* shrinks with 1/Œ≤, the cost shrinks quadratically with increasing nudging strength, C=12‚ÄñùíÜ‚Äæ*‚Äñ2=o(1Œ≤2), and hence the cost term Œ≤2‚ÄñùíÜ‚Äæ*‚Äñ2 that enters in L=EM+Œ≤2‚ÄñùíÜ‚Äæ*‚Äñ2 vanishes in the limit Œ≤‚Üí‚àû. In this large Œ≤ limit, where ùíÜ‚Äæùíê*=0 and hence the outputs are clamped, ùíñùíê=ùíñùíê*, the Lagrangian reduces to the mismatch energy, L=EM. Along the least-action trajectories, we, therefore, get ùëæÀô‚àù‚àí‚àÇL‚àÇùëæ=‚àídLdùëæ=‚àídEMdùëæ. The first equality uses Equation 28, and the second uses L=EM just derived for Œ≤=‚àû. This is a statement (i) of Theorem 1. In the case of successful learning, EM=0, we also conclude that the cost vanishes, C=0. This is the case because EM=0 implies EMo=0 for all output neurons o. Since EMo=12ùíÜ‚Äæo2=12(ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ+Œ≤ùíÜ‚Äæ*)o2, we conclude that ùíÜ‚Äæo=0, and if the output neurons do not feed back to the network (which we can assume without loss of generality), we conclude that ùíÜ‚Äæo*=0.
(ii) To consider the case of small Œ≤, we use that the cost C can be expressed as C=‚àÇL‚àÇŒ≤. This is a direct consequence of how C enters in L=12‚ÄñùíÜ‚Äæ‚Äñ2+Œ≤2C, see Equation 16 and Scellier and Bengio, 2017. We now put this together with Equation 28 and the finding that ‚àÇL‚àÇŒ≤=dLdŒ≤. Since for the Lipschitz continuous function L in u, W, and Œ≤ (L is even smooth in these arguments), the total derivatives interchange (which is a consequence of the Moore-Osgood theorem applied to the limits of the difference quotients), we then get at any t,
The last expression is calculated from the specific form of the Lagrangian Equation 17, using that by definition ùíÜ‚Äæ=ùíñ‚àíùëæùíì‚Äæ.
Finally, in the absence of output nudging, Œ≤=0, we can assume vanishing errors, ùíÜ‚Äæ=0, as they solve the self-consistency equation, ùíÜ‚Äæ=ùíì‚Äænet‚Ä≤‚ãÖùëænetTùíÜ‚Äæ for all t, see Equation 27. For these solutions we have ùíÜ‚Äæùíì‚ÄæT|Œ≤=0=0. Writing out the total derivative of the function ùíà(Œ≤)=ùíÜ‚Äæùíì‚ÄæT with respect to Œ≤ at Œ≤=0 as limit of the difference quotient, dùíà(Œ≤)dŒ≤|Œ≤=0=limŒ≤‚Üí0‚Å°1Œ≤(ùíà(Œ≤)‚àíùíà(0))=limŒ≤‚Üí0‚Å°1Œ≤ùíà(Œ≤), using that ùíà(0)=0, we calculate at any t,
Here, we assume that ùíÜ‚Äæùíì‚ÄæT is evaluated at Œ≤&gt;0 (that itself approaches 0), while ùíÜ‚Äæùíì‚ÄæT|Œ≤=0 is evaluated at Œ≤=0. Combining Equations 29 and 30 yields the cost gradient at any t,
This justifies the gradient learning rule ùëæÀô in Equation 27. Learning is stochastic gradient descent on the expected cost, where stochasticity enters in the randomization of the stimulus and target sequences ùíìin(t) and ùíñ*(t). For the regularity statement, see ‚ÄòFrom implicit to explicit differential equations‚Äô in the sec:Integration. Notice that this proof works for a very general form of the Lagrangian L, until the specific expression for ‚àÇL‚àÇùëæ. For a proof in terms of partial derivatives only, see Appendix 8, and for a primer on partial and total derivatives see Appendix 7.

Instantaneous gradient descent on C(ùíñùíê*,ùíìin)
The cost C=12‚Äñùíñùíê*‚àíùíñùíê‚Äñ2 at each time t is a function of the voltage ùíñùíê of the output neurons and the corresponding targets. In a feedforward network, due to the instantaneity of the voltage propagation Equation 23, ùíñùíê is in the absence of output nudging (Œ≤=0) an instantaneous function of the voltage at the first layer, ùíñ1(t)=ùëæinùíìin(t)+ùíñ1(t0)e‚àít‚àít0œÑ. For initialisation at t0=‚àí‚àû, the second term vanishes for all t and hence ùíñ1(t)=ùëæinùíìin(t). The output voltage ùíñùíê(t), therefore, becomes a function ùë≠W of the low-pass filtered input rate ùíìin(t) that captures the instantaneous network mapping, ùíñùíê(t)=ùë≠W(ùíìin(t)), and with this the cost also becomes an instantaneous function of ùíìin and ùíñùíê*, namely C(t)=12‚Äñùíñùíê*(t)‚àíùíñùíê(t)‚Äñ2=12‚Äñùíñùíê*(t)‚àíùë≠W(ùíìin(t))‚Äñ2.
For a general network, again assuming t0=‚àí‚àû, the voltage is determined by the vanishing gradient ‚àÇL‚àÇùíñ=ùíá(ùíñ,t)=ùíñ‚àíùëæùíì‚Äæ(ùíñ)‚àíùíÜ‚Äæ(ùíñ)=0 with ùíÜ‚Äæ=ùùê‚Äæ‚àíŒ≤ùíÜ‚Äæ*, see Equation 21. For the inclusive treatment of the initial transient see Appendix 3 and Appendix 4. Remember that ùíì‚Äæ=(ùíì‚Äæin,ùíì‚Äænet(ùíñ))T and ùíÜ‚Äæ*=ùíñùíê*‚àíùíñùíê. For a given ùíì‚Äæin and ùíñùíê* at time t, the equation ùíá(ùíñ,t)=0 can be locally solved for ùíñ if the Hessian ùëØ=‚àÇ2L‚àÇùíñ2=‚àÇùíá‚àÇùíñ=1‚àíùëænetùùÜ‚Ä≤‚àíùíÜ‚Äæ‚Ä≤ is invertible, ùíñ=ùë≠(ùíì‚Äæin,ùíñùíê*). This mapping can be restricted to the output voltages ùíñùíê on the left-hand side, while replacing ùíñùíê*=ùíñùíê+ùíÜ‚Äæùíê* in the argument on the right-hand side (even if this again introduces ùíñùíê there). With this, we obtain the instantaneous mapping ùíñùíê(t)=ùë≠W(ùíìin(t),ùíÜ‚Äæùíê*(t)) from the low-pass filtered input and the output error to the output itself. Notice that for functional feedforward network, the network weight matrix ùëænet is lower triangular, and for small enough Œ≤ the Hessian ùëØ is, therefore, always positive definite (see also Methods, Sect. From implicit to explicit differential equations).

Proving theorem 2 (rt-DeEL)
Here, we restrict ourselves to layered network architectures. To prove Theorem 2 first assume that interneurons receive no nudging (Œ≤I=0) and only the lateral interneuron-to-pyramidal weights ùëæPIl are plastic. This is already sufficient to prove the rt-DeEL theorem. Yet, simulations showed that learning the lateral pyramidal-to-interneuron weights ùëæIPl via top-down nudging, so that the interneuron activity mimics the upper layer pyramidal neuron activity, helps in learning a correct error representation. We consider this case of learning ùëæIPl later.
If the microcircuits is ought to correctly implement error backpropagation, all local prediction errors ùíÜ‚Äæl must vanish in the absence of output nudging (Œ≤=0) as there is no target error. Consequently, any remaining errors in the network are caused by a misalignment of the lateral microcircuit. We show how learning the interneuron-to-pyramidal weights ùëæPIl corrects for such misalignments.
To define the gradient descent plasticity of the weights WPIl from the interneurons to the pyramidal neurons, we consider the apical error formed by the difference of top-down input and interneuron input, ùíÜ‚ÄælA=ùë©lùíñl+1‚àíùëæPIlùíñIl, and define the apical mismatch energy as ElPI=12‚ÄñùíÜ‚ÄælA‚Äñ2. Gradient descent along this energy with respect to WPIl yields
evaluated online while presenting input patterns from the data distribution to the network. We assume that the apical contribution to the somatic voltage is further modulated by the somatic spike rate, ùíì‚Äæl‚Ä≤‚ãÖùíÜ‚ÄælA. After successful learning, the top-down input ùë©lùíñl+1 is fully subtracted away by the lateral input in the apical compartment, and we have
Once this condition is reached, the network achieves a state where, over the activity space spanned by the data, top-down prediction errors throughout the network vanish,
We show that this top-down prediction error, after the successful learning of the microcircuit, shares the properties of error-backpropagation for a suitable backprojection weights ùë©.
Due to the vanishing prediction errors, pyramidal cells only receive bottom-up input ùíñl+1=ùëæl+1ùíì‚Äæl. Using this expression as well as the expression for interneuron membrane potentials without top-down nudging (Œ≤I=0 in Equation 9), ùíñIl=ùëæIPlùíì‚Äæl, and plugging both into Equation 33, we get
Assuming that ùëæIPl has full rank, and the low-pass filtered rates ùíì‚Äæl span the full nl dimensions of layer l when sampled across the data set, we conclude that
In other words, the loop via upper layer and back is learned to be matched by a lateral loop through the interneurons.
Equation 36 imposes a restriction on the minimal number of interneurons nlI at layer l. In fact, the matrix product ùë©lùëæl+1 maps a nl-dimensional space onto itself via nl+1-dimensional space. The maximal rank of the this matrix product is limited by the smallest dimension, i.e., rank(ùë©lùëæl+1)‚â§min(nl,nl+1). Analogously, rank(ùëæPIlùëæIPl)‚â§min(nl,nlI). But since the two ranks are the same according to Equation 36, we conclude that in general nlI‚â•min(nl,nl+1) must hold, i.e., there should be at least as many interneurons at layer l as the lowest number of pyramidal neurons at either layer l or l+1. Note that by choosing nlI=nl+1 as in Sacramento et al., 2018 (or nlI&gt;nl+1 as in this work), the conditions is fulfilled.
With ùíñIl=ùëæIPlùíì‚Äæl and Equation 36, the top-down prediction error from Equation 34, in the presence of output nudging (Œ≤&gt;0), can be written in the backpropagation form
Finally, the simulations showed that learning the lateral weights in the microcircuit greatly benefits from also adapting the pyramidal-to-interneuron weights ùëæIP by gradient descent on EIP=12‚àël‚ÄñùíñIl‚àíùëæIPlùíì‚Äæl‚Äñ2, using top-down nudging of the inhibitory neurons (Œ≤I&gt;0),
After learning we have ùíñIl=ùëæIPlùíì‚Äæl, and plugging in ùíñIl=(1‚àíŒ≤I)ùëæIPlùíì‚Äæl+Œ≤Iùë©IPlùíñl+1 (Equation 9), we obtain ùëæIPlùíì‚Äæl=ùë©IPlùíñl+1. Since ùíñl+1=ùëæl+1ùíì‚Äæl, we conclude as before,
The top-down weights BIPl that nudge the lower-layer interneurons has randomized entries and may be considered as full rank. If there are less pyramidal neurons in the upper layer than interneurons in the lower layer, BIPl selects a subspace in the interneuron space of dimension nl+1&lt;nlI. This seems to simplify the learning of the interneuron-to-pyramidal cell connections WPI. In fact, this learning now has only to match the nl+1-dimensional interneuron subspace embedded in nlI dimensions to an equal (nl+1-)dimensional pyramidal cell subspace emedded in nl dimensions.
Learning of the interneuron-to-pyramidal cell connections works with the interneuron nudging as before, and combining Equations 36 with 39 yields the ‚Äòloop consistency‚Äô
The learning of the microcircuit was described in the absence of output nudging. Conceptually, this is not a problem as one could introduce a pre-learning phase where the lateral connections are first correctly aligned before learning of the feedforward weights begins. In simulations we find that both the lateral connections as well as the forward connections can be trained simultaneously, without the need for such a pre-learning phase. We conjecture that this is due to the fact that our plasticity rules are gradient descent on the energy functions L, EPI, and EIP, respectively.

From implicit to explicit differential equations
The voltage dynamics is solved by a forward-Euler scheme ùíñ(t+dt)=ùíñ(t)+ùíñÀô(t)dt. The derivative ùíñÀô(t) is calculated either through (i) the implicit differential Equation 7a yielding œÑùíñÀô(t)=ùíâ(ùíñ(t),ùíñÀô(t‚àídt)), or (ii) by isolating ùíñÀô(t) and solving for the explicit differential equation œÑùíñÀô(t)=ùíà(ùíñ(t)), as explained in Appendix 3 (after Equation 51).
(i) The implicit differential equation, œÑùíñÀô(t)=‚àíùíñ(t)+ùëæùíì(t)+ùíÜ(t), see Equation 22, is iteratively solved by assigning ùíì(t)=œÅ(ùíñ(t))+œÅ‚Ä≤(ùíñ(t))‚ãÖùíñÀô(t‚àídt) and calculating the error ùíÜ(t)=ùíÜ‚Äæ(t)+œÑùíÜ‚ÄæÀô(t) with ùíÜ‚Äæ(ùíñ)=œÅ‚Ä≤(ùíñ)‚ãÖùëænetT(ùíñ‚àíùëænetœÅ(ùíñ)‚àíùëæinùíì‚Äæin)+Œ≤ùíÜ‚Äæ* and ùíÜ‚ÄæÀô(t)=ùíÜ‚Äæ‚Ä≤(ùíñ(t))‚ãÖùíñÀô(t‚àídt).
This iteration exponentially converges to a fixed point uÀô(t) on a time scale dt1‚àík, where 1‚àík&gt;0 is the smallest Eigenvalue of the Hessian ùëØ=‚àÇ2L‚àÇùíñ2=1‚àíùëænetùùÜ‚Ä≤‚àíùíÜ‚Äæ‚Ä≤, see Appendix 3.
(ii) The explicit differential equation is obtained by eliminating the ùíñÀô from the right-hand side of the implicit differential equation. Since ùíñÀô enters linearly we get œÑùëØùíñÀô=‚àíùíá‚àíœÑ‚àÇùíá‚àÇt with ùíá(ùíñ,t)=‚àÇL‚àÇùíñ=ùíñ‚àíùëæùíì‚Äæ‚àíùùê‚Äæ‚àíŒ≤ùíÜ‚Äæ*. The explicit form is obtained by matrix inversion, ùíñÀô=ùíà(ùíñ,t)=‚àí1œÑùëØ‚àí1(ùíá+œÑ‚àÇùíá‚àÇt), as the Hessian is invertible if it is strictly positive definite (which is typically the case, see Appendix 3, after Equation 48). The external input and the target enter through ‚àÇùíá‚àÇt=ùëæinùíì‚ÄæÀôin+Œ≤ùíñÀôùíê*, where the derivative of the target voltage is only added for the output neurons ùíê. This explicit differential equation is shown to be contractive in the sense that for each input trajectory ùíìin(t) and target trajectory ùíñ*(t), the voltage trajectory ùíñ(t) is locally attracting for neighbouring trajectories. This local attracting trajectory is the vanishing-gradient trajectory ùíá(ùíñ,t)=0, and the gradient remains 0 even if the input contains delta-functions, see Appendix 4.
Moving and latent equilibria: a formal definition
We showed that the motor output (ùíñùíê), together with the low-pass filtered sensory input (ùíì‚Äæin) and the motor feedback (ùíÜ‚Äæùíê*) is in a moving equilibrium, ùíñùíê=ùë≠W(ùíì‚Äæin,ùíÜ‚Äæùíê*), see Figure 3a. In general, a dynamical system in ùíñ that is given in an implicit form ùëÆ(ùíô,ùíôÀô,ùíñ,ùíñÀô)=0 with external inputs (ùíô,ùíôÀô) is said to be in a moving equilibrium if the variable ùíñ is an instantaneous function of the input ùíô at any point in time, ùíñ=ùë≠(ùíô). The fact that the implicit differential equation ùëÆ=0 represents a dynamical system in ùíñ implies that, in principle, it has a representation in the explicit form ùíñÀô=ùíà(ùíñ,ùíô,ùíôÀô), guaranteed by an invertible Jacobian ‚àÇùëÆ‚àÇùíñÀô.
Our example is obtained from ùëÆ=(1+ùùâ‚ãÖddt)ùíá with ùíá(ùíñ,ùíô)=‚àÇL‚àÇùíñ and ùíô=(ùíì‚Äæin,ùíÜ‚Äæùíê*), leading to ùíô+ùùâ‚ãÖùíôÀô=(ùíìin,ùíÜùíê*). Given the paramterization of ùëÆ by the weights, we get the parametrized function ùíñ=ùë≠W(ùíô), and this is restricted to the output components ùíñùíê of ùíñ. The condition on the Jacobian translates to ‚àÇùëÆ‚àÇùíñÀô=‚àÇùíá‚àÇùíñ=‚àÇ2L‚àÇùíñ2 being invertible. Crucially, the description of the dynamics in the biological or physical substrate is not given in its explicit form ùíñÀô=ùíà(ùíñ,ùíô,ùíôÀô). However, it is given in an implicit form expressed as ùíñÀô=ùíâ(ùíô,ùíôÀô,ùíñ,ùíñÀô), where ùíñÀô still appears on the right-hand side. This ‚Äòhybrid‚Äô form is directly solved either in real time by the biophysical substrate itself, or by the forward-Euler scheme on clocked hardware, see (i) above. Notice that moving equilibria ùíñ=ùë≠W(ùíô) with ùíô=(ùíì‚Äæin,ùíÜ‚Äæùíê*) are able to capture complex temporal processing of the instantaneous input ùíìin. In fact, the low-pass filtering ùíì‚Äæin can be obtained on various time scales through different œÑin‚Äôs, and ùë≠W for a general network ùëæ can be arbitrary complex. The task is to adapt ùëæ such that the ‚Äòhybrid‚Äô dynamical system eventually implements the target mapping ùíñùíê*=ùë≠*(ùíô).
The Latent Equilibrium (Haider et al., 2021) can be analogously formalized as a dynamical system in ùíñ, implicitly given by ùëÆ(ùíô,ùíñ,ùíñÀô)=0, and having a solution of the form ùíñ+ùùâ‚ãÖùíñÀô=ùë≠(ùíô). Abbreviating again ùíá(ùíñ,ùíô)=‚àÇL‚àÇùíñ with the same Lagrangian L=12‚Äñùíñ‚àíùëæœÅ(ùíñ)‚Äñ2+Œ≤2C as in the present NLA, the Latent Equilibrium is obtained for ùëÆ(ùíô,ùíñ,ùíñÀô)=ùíá(ùíñ+ùùâ‚ãÖùíñÀô,ùíô). The solution implies that the rate ùíì=œÅ(ùíñ+ùùâ‚ãÖùíñÀô)=œÅ(ùë≠(ùíô)) is an instantaneous function of ùíô=(ùíìin,ùíÜùíê*), here without low-pass filtering. As for moving equilibria, the crucial point is that the biophysical substrate implements a hybrid form of the dynamical system, now ùíñÀô=ùíâ(ùíô,ùíñ,ùíñÀô), that is implicitly solved by the analog substrate, and also allows for a solution in clocked hardware. For an extended stability analysis of the moving and latent equilibria see Appendix 4.


Simulation details
Solving the explicit differential equation seems to be more robust when the learning rate for ùëæÀô gets larger. The explicit form is also less sensitive to large Euler steps dt, see Appendix 3. By this reason, the ordinary differential equations (ODE) were solved in the explicit form when including plasticity ùëæÀô. The algorithms are summarized as follows, once without interneurons (Algorithm 1), and once with interneurons (Algorithm 2):
: 
: 
Details for Figure 3b
Color coded snapshot of cortical local field potentials (LFPs) in a human brain from 56 deep iEEG electrodes at various locations, converted with the sigmoidal voltage-to-rate function r‚Äæ(u)=11+e‚àíu and plotted onto a standard Talairach Brain (Talairach and Tournoux, 1988). The iEEG data is from a patient with pharmacoresistant epilepsy and electrodes implanted during presurgical evaluation, extracted from the data release of Burrello et al., 2019. The locations of the electrodes are chosen in accordance with plausibilty, as the original positions of the electrodes were omitted due to ethical standards to prevent patient identification.

Details for Figure 3c
Simulations of the voltage dynamics (Equation 7a) and weight dynamics (Equation 8), with learning rate Œ∑=10‚àí3, step size dt= 1ms for the forward Euler integration, membrane time constant  œÑ=10ms and logistic activation function. Weights were initialized randomly from a normal distribution N(0,0.12) with a cut-off at ¬± 0.3. The number of neurons in the network N was n=96, among them 56 output neurons O‚äÇN that were simultaneously nudged, and 40 hidden neurons. During training, all output neurons were nudged simultaneously (with Œ≤=0.1), whereas during testing, only 42 out of 56 neurons were nudged, the remaining 14 left to reproduce the traces. Data points of the iEEG signal were sampled with a frequency of 512 Hz. For simplicity, we, therefore, assumed that successive data points are separated by 2ms, and up-sampled the signal via simple interpolation to 1 ms resolution as required by our integration scheme. Furthermore, the raw values were normalized by dividing them by a factor of 200 to ensure that they are approximately in a range of ¬±1‚Äì2. Training and testing was done on two separate 8 s traces of the iEEG recording. Same data as in Figure 3b1.

Details for Figure 4
Simulation of the neuronal and synaptic dynamics as given by Equation 8, Equation 7a, Equation 7b. For 5 ms, 10 ms, and 50 ms presentation time, we used an integration step size of dt=0.05ms, dt=0.1ms and dt=0.5ms, respectively (and dt=1ms otherwise). As an activation function, we used the step-linear function (hard sigmoidal) with r‚Äæ(u)=0 for u‚â§0, r‚Äæ(u)=1 for u‚â•1 and r‚Äæ(u)=u in between. The learning rate was initially set to Œ∑=10‚àí3 and then reduced to Œ∑=10‚àí4 after 22,000 s. The nudging strength was Œ≤=0.1 and the membrane time constant œÑ=10ms. In these simulations (and only for these) we assumed that at each presynaptic layer l=0,1,..,n‚àí1 there is a first neuron indexed by 0 that fires with constant rate r‚Äæl,0=1, effectively allowing the postsynaptic neurons ùíì‚Äæl+1 to learn a bias through the first column of the weight matrix ùëæl+1. Weights were initialized randomly from a normal distribution N(0,0.012) with a cut-off at ¬±0.03. For an algorithmic conversion see the scheme below. In Figure 4c1, ‚Äòrt-DeEP w/o lookahead‚Äô is based on the dynamics œÑùíñÀô=‚àíùíñ+ùëæùíì‚Äæ+ùíÜ‚Äæ. For ‚ÄòùíñÀô w/o error + backprop,‚Äô we use œÑùíñÀô=‚àíùíñ+ùëæùíì as the forward model (so without error terms on the membrane potential, but a prospective ùíì), and calculate weight updates using error backpropagation. In 4c2, we provide three controls: the test error for (i) a standard shallow artificial neural network trained on MNIST (black dashed line), (ii) rt-DeEP without prospective coding (as in Figure 4c1), but in Figure 4c2 with plasticity only turned on when the network is completely stationary, i.e., after waiting for several 100ms, such that synaptic weights are not changed during transients (orange dashed line, denoted by ‚Äòw/o transients‚Äô), and (iii) an equivalent artificial neural network, ùíñl=ùëælùíì‚Äæl‚àí1, trained using error backpropagation (black dashed line, ‚Äòstandard backprop‚Äô).

Details for Figure 5
Simulation of neuronal and synaptic dynamics with plastic microcircuit, i.e., the pyramidal-to-interneuron and lateral weights of the microcircuit learned during training.
For the results shown in Figure 5c2, the following parameters were used. As an activation function, we used a hard sigmoid function and the membrane time constant was set to œÑ=10 ms. Image presentation time is 100ms. Forward, pyramidal-to-interneuron and interneuron-to-pyramidal weights were initialized randomly from a normal distribution N(0,0.012) with a cut-off at ¬±0.03. All learning rates were chosen equal Œ∑=10‚àí3 and were subsequently reduced to Œ∑=10‚àí4 after 22,000 s training time. The nudging parameters were set to Œ≤=0.1 and Œ≤I=0.11.1. The feedback connections ùë©l and the nudging matrices ùë©lIP were initialized randomly from a normal distribution 5‚ãÖN(0,0.012) with a cut-off at ¬±0.15. The used integration step size was dt=0.25 ms. All weights were trained simultaneously. For an algorithmic conversion see the scheme below. The interneuron membrane potential was calculated by Equation 9 with a linear transfer function.

